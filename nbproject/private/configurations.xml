<?xml version="1.0" encoding="UTF-8"?>
<configurationDescriptor version="100">
  <logicalFolder name="root" displayName="root" projectFiles="true" kind="ROOT">
    <df root="." name="0">
      <df name=".vscode">
      </df>
      <df name="contrib">
        <df name="bitrpc">
        </df>
        <df name="debian">
          <df name="bin">
          </df>
          <df name="examples">
          </df>
          <df name="manpages">
          </df>
          <df name="patches">
          </df>
          <df name="source">
          </df>
        </df>
        <df name="gitian-descriptors">
        </df>
        <df name="gitian-downloader">
        </df>
        <df name="macdeploy">
        </df>
        <df name="wallettools">
        </df>
      </df>
      <df name="doc">
      </df>
      <df name="share">
        <df name="pixmaps">
        </df>
        <df name="qt">
          <df name="img">
          </df>
        </df>
      </df>
      <df name="src">
        <df name="boost">
          <df name="doc">
            <df name="html">
              <df name="accumulators">
              </df>
              <df name="align">
              </df>
              <df name="any">
              </df>
              <df name="array">
                <df name="more">
                </df>
              </df>
              <df name="atomic">
              </df>
              <df name="bbv2">
              </df>
              <df name="boost">
                <df name="accumulators">
                  <df name="extract">
                  </df>
                  <df name="impl">
                  </df>
                  <df name="tag">
                  </df>
                </df>
                <df name="algorithm">
                </df>
                <df name="container">
                  <df name="adaptive_pool">
                  </df>
                  <df name="allocator">
                  </df>
                  <df name="allocator_traits">
                  </df>
                  <df name="new_allocator">
                  </df>
                  <df name="new_allocator__idp59775248">
                  </df>
                  <df name="node_allocator">
                  </df>
                  <df name="scoped_allocator_adaptor">
                  </df>
                  <df name="small_vector_allocator">
                  </df>
                </df>
                <df name="CV">
                  <df name="simple_exception_policy">
                  </df>
                </df>
                <df name="date_time">
                  <df name="winapi">
                  </df>
                </df>
                <df name="function">
                </df>
                <df name="functionN">
                </df>
                <df name="gregorian">
                </df>
                <df name="heap">
                  <df name="skew_heap">
                  </df>
                </df>
                <df name="interprocess">
                  <df name="adaptive_pool">
                  </df>
                  <df name="allocator">
                  </df>
                  <df name="cached_adaptive_pool">
                  </df>
                  <df name="cached_node_allocator">
                  </df>
                  <df name="mapped_region">
                  </df>
                  <df name="node_allocator">
                  </df>
                  <df name="offset_ptr">
                  </df>
                  <df name="private_adaptive_pool">
                  </df>
                  <df name="private_node_allocator">
                  </df>
                  <df name="segment_manager">
                  </df>
                </df>
                <df name="intrusive">
                  <df name="circular_list_algorithms">
                  </df>
                  <df name="pointer_has_rebind">
                  </df>
                  <df name="pointer_has_rebind_other">
                  </df>
                  <df name="pointer_traits_idp49029744">
                  </df>
                  <df name="sgtree_algorithms">
                  </df>
                  <df name="treap_algorithms">
                  </df>
                </df>
                <df name="lambda">
                </df>
                <df name="local_time">
                </df>
                <df name="lockfree">
                  <df name="stack">
                  </df>
                </df>
                <df name="logic">
                  <df name="tribool">
                  </df>
                </df>
                <df name="move_upd">
                  <df name="get_element_type">
                  </df>
                  <df name="is_rvalue_convertible">
                  </df>
                </df>
                <df name="movelib">
                </df>
                <df name="mpi">
                  <df name="allocator">
                  </df>
                  <df name="allocator_voi_idp114760400">
                  </df>
                  <df name="python">
                  </df>
                  <df name="threading">
                  </df>
                </df>
                <df name="numeric">
                  <df name="functional">
                  </df>
                  <df name="op">
                  </df>
                </df>
                <df name="posix_time">
                </df>
                <df name="program_options">
                  <df name="command_line_style">
                  </df>
                </df>
                <df name="property_tree">
                  <df name="info_parser">
                  </df>
                  <df name="ini_parser">
                  </df>
                  <df name="json_parser">
                  </df>
                  <df name="xml_parser">
                  </df>
                </df>
                <df name="proto">
                  <df name="_">
                  </df>
                  <df name="_byref">
                  </df>
                  <df name="_byval">
                  </df>
                  <df name="_child_c">
                  </df>
                  <df name="_data">
                  </df>
                  <df name="_default">
                  </df>
                  <df name="_env">
                  </df>
                  <df name="_env_var">
                  </df>
                  <df name="_expr">
                  </df>
                  <df name="_state">
                  </df>
                  <df name="_value">
                  </df>
                  <df name="_void">
                  </df>
                  <df name="address_of">
                  </df>
                  <df name="and_">
                  </df>
                  <df name="assign">
                  </df>
                  <df name="binary_expr">
                  </df>
                  <df name="bitwise_and">
                  </df>
                  <df name="bitwise_and_assign">
                  </df>
                  <df name="bitwise_or">
                  </df>
                  <df name="bitwise_or_assign">
                  </df>
                  <df name="bitwise_xor">
                  </df>
                  <df name="bitwise_xor_assign">
                  </df>
                  <df name="by_value_generator">
                  </df>
                  <df name="call">
                  </df>
                  <df name="comma">
                  </df>
                  <df name="complement">
                  </df>
                  <df name="compose_generators">
                  </df>
                  <df name="context">
                    <df name="callable_context">
                    </df>
                    <df name="default_context">
                    </df>
                    <df name="null_context">
                    </df>
                  </df>
                  <df name="default_generator">
                  </df>
                  <df name="dereference">
                  </df>
                  <df name="divides">
                  </df>
                  <df name="divides_assign">
                  </df>
                  <df name="domain">
                  </df>
                  <df name="equal_to">
                  </df>
                  <df name="expr">
                  </df>
                  <df name="extends">
                  </df>
                  <df name="external_transforms">
                  </df>
                  <df name="fold">
                  </df>
                  <df name="fold_tree">
                  </df>
                  <df name="function">
                  </df>
                  <df name="functional">
                    <df name="as_child">
                    </df>
                    <df name="as_env">
                    </df>
                    <df name="as_expr">
                    </df>
                    <df name="at">
                    </df>
                    <df name="begin">
                    </df>
                    <df name="child">
                    </df>
                    <df name="child_c">
                    </df>
                    <df name="deep_copy">
                    </df>
                    <df name="distance">
                    </df>
                    <df name="end">
                    </df>
                    <df name="env_var">
                    </df>
                    <df name="eval">
                    </df>
                    <df name="first">
                    </df>
                    <df name="flatten">
                    </df>
                    <df name="has_env_var">
                    </df>
                    <df name="left">
                    </df>
                    <df name="make_expr">
                    </df>
                    <df name="make_pair">
                    </df>
                    <df name="next">
                    </df>
                    <df name="pop_back">
                    </df>
                    <df name="pop_front">
                    </df>
                    <df name="prior">
                    </df>
                    <df name="push_back">
                    </df>
                    <df name="push_front">
                    </df>
                    <df name="rbegin">
                    </df>
                    <df name="rend">
                    </df>
                    <df name="reverse">
                    </df>
                    <df name="right">
                    </df>
                    <df name="second">
                    </df>
                    <df name="size">
                    </df>
                    <df name="unpack_expr">
                    </df>
                    <df name="value">
                    </df>
                  </df>
                  <df name="generator">
                  </df>
                  <df name="greater">
                  </df>
                  <df name="greater_equal">
                  </df>
                  <df name="if_">
                  </df>
                  <df name="if_else_">
                  </df>
                  <df name="integral_c">
                  </df>
                  <df name="lazy">
                  </df>
                  <df name="less">
                  </df>
                  <df name="less_equal">
                  </df>
                  <df name="logical_and">
                  </df>
                  <df name="logical_not">
                  </df>
                  <df name="logical_or">
                  </df>
                  <df name="make">
                  </df>
                  <df name="mem_ptr">
                  </df>
                  <df name="minus">
                  </df>
                  <df name="minus_assign">
                  </df>
                  <df name="modulus">
                  </df>
                  <df name="modulus_assign">
                  </df>
                  <df name="multiplies">
                  </df>
                  <df name="multiplies_assign">
                  </df>
                  <df name="nary_expr">
                  </df>
                  <df name="negate">
                  </df>
                  <df name="not_">
                  </df>
                  <df name="not_equal_to">
                  </df>
                  <df name="nullary_expr">
                  </df>
                  <df name="or_">
                  </df>
                  <df name="pass_through">
                  </df>
                  <df name="plus">
                  </df>
                  <df name="plus_assign">
                  </df>
                  <df name="pod_generator">
                  </df>
                  <df name="post_dec">
                  </df>
                  <df name="post_inc">
                  </df>
                  <df name="pre_dec">
                  </df>
                  <df name="pre_inc">
                  </df>
                  <df name="protect">
                  </df>
                  <df name="result_of">
                  </df>
                  <df name="reverse_fold_tree">
                  </df>
                  <df name="shift_left">
                  </df>
                  <df name="shift_left_assign">
                  </df>
                  <df name="shift_right">
                  </df>
                  <df name="shift_right_assign">
                  </df>
                  <df name="subscript">
                  </df>
                  <df name="switch_">
                  </df>
                  <df name="tag">
                  </df>
                  <df name="terminal">
                  </df>
                  <df name="transform">
                  </df>
                  <df name="unary_expr">
                  </df>
                  <df name="unary_plus">
                  </df>
                  <df name="when_Grammar__idp209640512">
                  </df>
                  <df name="when_Grammar__idp209681552">
                  </df>
                  <df name="when_Grammar__idp209724384">
                  </df>
                </df>
                <df name="random">
                  <df name="bernoulli_distribution">
                  </df>
                  <df name="beta_distribution">
                  </df>
                  <df name="binomial_distribution">
                  </df>
                  <df name="cauchy_distribution">
                  </df>
                  <df name="chi_squared_distribution">
                  </df>
                  <df name="discrete_distribution">
                  </df>
                  <df name="exponential_distribution">
                  </df>
                  <df name="extreme_value_distribution">
                  </df>
                  <df name="fisher_f_distribution">
                  </df>
                  <df name="gamma_distribution">
                  </df>
                  <df name="geometric_distribution">
                  </df>
                  <df name="laplace_distribution">
                  </df>
                  <df name="lognormal_distribution">
                  </df>
                  <df name="negative_binom_idp94123888">
                  </df>
                  <df name="non_central_c_idp150001424">
                  </df>
                  <df name="normal_distribution">
                  </df>
                  <df name="piecewise_cons_idp94191504">
                  </df>
                  <df name="piecewise_lin_idp226179472">
                  </df>
                  <df name="poisson_distribution">
                  </df>
                  <df name="student_t_distribution">
                  </df>
                  <df name="triangle_distribution">
                  </df>
                  <df name="uniform_int_distribution">
                  </df>
                  <df name="uniform_on_sphere">
                  </df>
                  <df name="uniform_real_distribution">
                  </df>
                  <df name="uniform_smallint">
                  </df>
                  <df name="weibull_distribution">
                  </df>
                </df>
                <df name="signals">
                </df>
                <df name="signals2">
                  <df name="keywords">
                  </df>
                  <df name="signal">
                  </df>
                  <df name="slot">
                  </df>
                </df>
                <df name="type_erasure">
                </df>
                <df name="typeindex">
                </df>
                <df name="units">
                  <df name="abstract">
                  </df>
                  <df name="angle">
                  </df>
                  <df name="astronomical">
                  </df>
                  <df name="celsius">
                  </df>
                  <df name="cgs">
                  </df>
                  <df name="degree">
                  </df>
                  <df name="fahrenheit">
                  </df>
                  <df name="gradian">
                  </df>
                  <df name="imperial">
                  </df>
                  <df name="information">
                  </df>
                  <df name="metric">
                  </df>
                  <df name="operator">
                  </df>
                  <df name="revolution">
                  </df>
                  <df name="si">
                    <df name="constants">
                      <df name="codata">
                      </df>
                    </df>
                  </df>
                  <df name="temperature">
                  </df>
                  <df name="us">
                  </df>
                </df>
                <df name="xpressive">
                  <df name="op">
                    <df name="at">
                    </df>
                    <df name="back">
                    </df>
                    <df name="first">
                    </df>
                    <df name="front">
                    </df>
                    <df name="insert">
                    </df>
                    <df name="length">
                    </df>
                    <df name="make_pair">
                    </df>
                    <df name="second">
                    </df>
                    <df name="str">
                    </df>
                    <df name="top">
                    </df>
                    <df name="unwrap_reference">
                    </df>
                  </df>
                  <df name="regex_constants">
                  </df>
                </df>
              </df>
              <df name="boost_asio">
                <df name="example">
                  <df name="cpp03">
                    <df name="allocation">
                      <in>server.cpp</in>
                    </df>
                    <df name="buffers">
                      <in>reference_counted.cpp</in>
                    </df>
                    <df name="chat">
                      <in>chat_client.cpp</in>
                      <in>chat_message.hpp</in>
                      <in>chat_server.cpp</in>
                      <in>posix_chat_client.cpp</in>
                    </df>
                    <df name="echo">
                      <in>async_tcp_echo_server.cpp</in>
                      <in>async_udp_echo_server.cpp</in>
                      <in>blocking_tcp_echo_client.cpp</in>
                      <in>blocking_tcp_echo_server.cpp</in>
                      <in>blocking_udp_echo_client.cpp</in>
                      <in>blocking_udp_echo_server.cpp</in>
                    </df>
                    <df name="fork">
                      <in>daemon.cpp</in>
                      <in>process_per_connection.cpp</in>
                    </df>
                    <df name="http">
                      <df name="client">
                        <in>async_client.cpp</in>
                        <in>sync_client.cpp</in>
                      </df>
                      <df name="server">
                        <in>connection.cpp</in>
                        <in>connection.hpp</in>
                        <in>connection_manager.cpp</in>
                        <in>connection_manager.hpp</in>
                        <in>header.hpp</in>
                        <in>main.cpp</in>
                        <in>mime_types.cpp</in>
                        <in>mime_types.hpp</in>
                        <in>reply.cpp</in>
                        <in>reply.hpp</in>
                        <in>request.hpp</in>
                        <in>request_handler.cpp</in>
                        <in>request_handler.hpp</in>
                        <in>request_parser.cpp</in>
                        <in>request_parser.hpp</in>
                        <in>server.cpp</in>
                        <in>server.hpp</in>
                      </df>
                      <df name="server2">
                        <in>connection.cpp</in>
                        <in>connection.hpp</in>
                        <in>header.hpp</in>
                        <in>io_service_pool.cpp</in>
                        <in>io_service_pool.hpp</in>
                        <in>main.cpp</in>
                        <in>mime_types.cpp</in>
                        <in>mime_types.hpp</in>
                        <in>reply.cpp</in>
                        <in>reply.hpp</in>
                        <in>request.hpp</in>
                        <in>request_handler.cpp</in>
                        <in>request_handler.hpp</in>
                        <in>request_parser.cpp</in>
                        <in>request_parser.hpp</in>
                        <in>server.cpp</in>
                        <in>server.hpp</in>
                      </df>
                      <df name="server3">
                        <in>connection.cpp</in>
                        <in>connection.hpp</in>
                        <in>header.hpp</in>
                        <in>main.cpp</in>
                        <in>mime_types.cpp</in>
                        <in>mime_types.hpp</in>
                        <in>reply.cpp</in>
                        <in>reply.hpp</in>
                        <in>request.hpp</in>
                        <in>request_handler.cpp</in>
                        <in>request_handler.hpp</in>
                        <in>request_parser.cpp</in>
                        <in>request_parser.hpp</in>
                        <in>server.cpp</in>
                        <in>server.hpp</in>
                      </df>
                      <df name="server4">
                        <in>file_handler.cpp</in>
                        <in>file_handler.hpp</in>
                        <in>header.hpp</in>
                        <in>main.cpp</in>
                        <in>mime_types.cpp</in>
                        <in>mime_types.hpp</in>
                        <in>reply.cpp</in>
                        <in>reply.hpp</in>
                        <in>request.hpp</in>
                        <in>request_parser.cpp</in>
                        <in>request_parser.hpp</in>
                        <in>server.cpp</in>
                        <in>server.hpp</in>
                      </df>
                    </df>
                    <df name="icmp">
                      <in>icmp_header.hpp</in>
                      <in>ipv4_header.hpp</in>
                      <in>ping.cpp</in>
                    </df>
                    <df name="invocation">
                      <in>prioritised_handlers.cpp</in>
                    </df>
                    <df name="iostreams">
                      <in>daytime_client.cpp</in>
                      <in>daytime_server.cpp</in>
                      <in>http_client.cpp</in>
                    </df>
                    <df name="local">
                      <in>connect_pair.cpp</in>
                      <in>iostream_client.cpp</in>
                      <in>stream_client.cpp</in>
                      <in>stream_server.cpp</in>
                    </df>
                    <df name="multicast">
                      <in>receiver.cpp</in>
                      <in>sender.cpp</in>
                    </df>
                    <df name="nonblocking">
                      <in>third_party_lib.cpp</in>
                    </df>
                    <df name="porthopper">
                      <in>client.cpp</in>
                      <in>protocol.hpp</in>
                      <in>server.cpp</in>
                    </df>
                    <df name="serialization">
                      <in>client.cpp</in>
                      <in>connection.hpp</in>
                      <in>server.cpp</in>
                      <in>stock.hpp</in>
                    </df>
                    <df name="services">
                      <in>basic_logger.hpp</in>
                      <in>daytime_client.cpp</in>
                      <in>logger.hpp</in>
                      <in>logger_service.cpp</in>
                      <in>logger_service.hpp</in>
                      <in>stream_socket_service.hpp</in>
                    </df>
                    <df name="socks4">
                      <in>socks4.hpp</in>
                      <in>sync_client.cpp</in>
                    </df>
                    <df name="spawn">
                      <in>echo_server.cpp</in>
                    </df>
                    <df name="ssl">
                      <in>client.cpp</in>
                      <in>server.cpp</in>
                    </df>
                    <df name="timeouts">
                      <in>async_tcp_client.cpp</in>
                      <in>blocking_tcp_client.cpp</in>
                      <in>blocking_udp_client.cpp</in>
                      <in>server.cpp</in>
                    </df>
                    <df name="timers">
                      <in>tick_count_timer.cpp</in>
                      <in>time_t_timer.cpp</in>
                    </df>
                    <df name="windows">
                      <in>transmit_file.cpp</in>
                    </df>
                  </df>
                  <df name="cpp11">
                    <df name="allocation">
                      <in>server.cpp</in>
                    </df>
                    <df name="buffers">
                      <in>reference_counted.cpp</in>
                    </df>
                    <df name="chat">
                      <in>chat_client.cpp</in>
                      <in>chat_message.hpp</in>
                      <in>chat_server.cpp</in>
                    </df>
                    <df name="echo">
                      <in>async_tcp_echo_server.cpp</in>
                      <in>async_udp_echo_server.cpp</in>
                      <in>blocking_tcp_echo_client.cpp</in>
                      <in>blocking_tcp_echo_server.cpp</in>
                      <in>blocking_udp_echo_client.cpp</in>
                      <in>blocking_udp_echo_server.cpp</in>
                    </df>
                    <df name="futures">
                      <in>daytime_client.cpp</in>
                    </df>
                    <df name="http">
                      <df name="server">
                        <in>connection.cpp</in>
                        <in>connection.hpp</in>
                        <in>connection_manager.cpp</in>
                        <in>connection_manager.hpp</in>
                        <in>header.hpp</in>
                        <in>main.cpp</in>
                        <in>mime_types.cpp</in>
                        <in>mime_types.hpp</in>
                        <in>reply.cpp</in>
                        <in>reply.hpp</in>
                        <in>request.hpp</in>
                        <in>request_handler.cpp</in>
                        <in>request_handler.hpp</in>
                        <in>request_parser.cpp</in>
                        <in>request_parser.hpp</in>
                        <in>server.cpp</in>
                        <in>server.hpp</in>
                      </df>
                    </df>
                    <df name="spawn">
                      <in>echo_server.cpp</in>
                    </df>
                  </df>
                </df>
                <df name="examples">
                </df>
                <df name="overview">
                  <df name="core">
                  </df>
                  <df name="cpp2011">
                  </df>
                  <df name="networking">
                  </df>
                  <df name="posix">
                  </df>
                  <df name="windows">
                  </df>
                </df>
                <df name="reference">
                  <df name="asio_handler_invoke">
                  </df>
                  <df name="async_connect">
                  </df>
                  <df name="async_read">
                  </df>
                  <df name="async_read_at">
                  </df>
                  <df name="async_read_until">
                  </df>
                  <df name="async_result">
                  </df>
                  <df name="async_write">
                  </df>
                  <df name="async_write_at">
                  </df>
                  <df name="basic_datagram_socket">
                    <df name="assign">
                    </df>
                    <df name="async_receive">
                    </df>
                    <df name="async_receive_from">
                    </df>
                    <df name="async_send">
                    </df>
                    <df name="async_send_to">
                    </df>
                    <df name="at_mark">
                    </df>
                    <df name="available">
                    </df>
                    <df name="basic_datagram_socket">
                    </df>
                    <df name="bind">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="connect">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_option">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="io_control">
                    </df>
                    <df name="local_endpoint">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                    <df name="open">
                    </df>
                    <df name="operator_eq_">
                    </df>
                    <df name="receive">
                    </df>
                    <df name="receive_from">
                    </df>
                    <df name="remote_endpoint">
                    </df>
                    <df name="send">
                    </df>
                    <df name="send_to">
                    </df>
                    <df name="set_option">
                    </df>
                    <df name="shutdown">
                    </df>
                  </df>
                  <df name="basic_deadline_timer">
                    <df name="basic_deadline_timer">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="cancel_one">
                    </df>
                    <df name="expires_at">
                    </df>
                    <df name="expires_from_now">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="wait">
                    </df>
                  </df>
                  <df name="basic_io_object">
                    <df name="basic_io_object">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                  </df>
                  <df name="basic_raw_socket">
                    <df name="assign">
                    </df>
                    <df name="async_receive">
                    </df>
                    <df name="async_receive_from">
                    </df>
                    <df name="async_send">
                    </df>
                    <df name="async_send_to">
                    </df>
                    <df name="at_mark">
                    </df>
                    <df name="available">
                    </df>
                    <df name="basic_raw_socket">
                    </df>
                    <df name="bind">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="connect">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_option">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="io_control">
                    </df>
                    <df name="local_endpoint">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                    <df name="open">
                    </df>
                    <df name="operator_eq_">
                    </df>
                    <df name="receive">
                    </df>
                    <df name="receive_from">
                    </df>
                    <df name="remote_endpoint">
                    </df>
                    <df name="send">
                    </df>
                    <df name="send_to">
                    </df>
                    <df name="set_option">
                    </df>
                    <df name="shutdown">
                    </df>
                  </df>
                  <df name="basic_seq_packet_socket">
                    <df name="assign">
                    </df>
                    <df name="async_receive">
                    </df>
                    <df name="at_mark">
                    </df>
                    <df name="available">
                    </df>
                    <df name="basic_seq_packet_socket">
                    </df>
                    <df name="bind">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="connect">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_option">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="io_control">
                    </df>
                    <df name="local_endpoint">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                    <df name="open">
                    </df>
                    <df name="operator_eq_">
                    </df>
                    <df name="receive">
                    </df>
                    <df name="remote_endpoint">
                    </df>
                    <df name="send">
                    </df>
                    <df name="set_option">
                    </df>
                    <df name="shutdown">
                    </df>
                  </df>
                  <df name="basic_serial_port">
                    <df name="assign">
                    </df>
                    <df name="basic_serial_port">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_option">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="open">
                    </df>
                    <df name="read_some">
                    </df>
                    <df name="send_break">
                    </df>
                    <df name="set_option">
                    </df>
                    <df name="write_some">
                    </df>
                  </df>
                  <df name="basic_signal_set">
                    <df name="add">
                    </df>
                    <df name="basic_signal_set">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="clear">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="remove">
                    </df>
                  </df>
                  <df name="basic_socket">
                    <df name="assign">
                    </df>
                    <df name="at_mark">
                    </df>
                    <df name="available">
                    </df>
                    <df name="basic_socket">
                    </df>
                    <df name="bind">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="connect">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_option">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="io_control">
                    </df>
                    <df name="local_endpoint">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                    <df name="open">
                    </df>
                    <df name="operator_eq_">
                    </df>
                    <df name="remote_endpoint">
                    </df>
                    <df name="set_option">
                    </df>
                    <df name="shutdown">
                    </df>
                  </df>
                  <df name="basic_socket_acceptor">
                    <df name="accept">
                    </df>
                    <df name="assign">
                    </df>
                    <df name="async_accept">
                    </df>
                    <df name="basic_socket_acceptor">
                    </df>
                    <df name="bind">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_option">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="io_control">
                    </df>
                    <df name="listen">
                    </df>
                    <df name="local_endpoint">
                    </df>
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                    <df name="open">
                    </df>
                    <df name="operator_eq_">
                    </df>
                    <df name="set_option">
                    </df>
                  </df>
                  <df name="basic_socket_iostream">
                    <df name="basic_socket_iostream">
                    </df>
                    <df name="expires_at">
                    </df>
                    <df name="expires_from_now">
                    </df>
                  </df>
                  <df name="basic_socket_streambuf">
                    <df name="assign">
                    </df>
                    <df name="at_mark">
                    </df>
                    <df name="available">
                    </df>
                    <df name="bind">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="connect">
                    </df>
                    <df name="expires_at">
                    </df>
                    <df name="expires_from_now">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_option">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="io_control">
                    </df>
                    <df name="local_endpoint">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                    <df name="open">
                    </df>
                    <df name="remote_endpoint">
                    </df>
                    <df name="set_option">
                    </df>
                    <df name="shutdown">
                    </df>
                  </df>
                  <df name="basic_stream_socket">
                    <df name="assign">
                    </df>
                    <df name="async_receive">
                    </df>
                    <df name="async_send">
                    </df>
                    <df name="at_mark">
                    </df>
                    <df name="available">
                    </df>
                    <df name="basic_stream_socket">
                    </df>
                    <df name="bind">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="connect">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_option">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="io_control">
                    </df>
                    <df name="local_endpoint">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                    <df name="open">
                    </df>
                    <df name="operator_eq_">
                    </df>
                    <df name="read_some">
                    </df>
                    <df name="receive">
                    </df>
                    <df name="remote_endpoint">
                    </df>
                    <df name="send">
                    </df>
                    <df name="set_option">
                    </df>
                    <df name="shutdown">
                    </df>
                    <df name="write_some">
                    </df>
                  </df>
                  <df name="basic_streambuf">
                  </df>
                  <df name="basic_waitable_timer">
                    <df name="basic_waitable_timer">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="cancel_one">
                    </df>
                    <df name="expires_at">
                    </df>
                    <df name="expires_from_now">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="wait">
                    </df>
                  </df>
                  <df name="basic_yield_context">
                  </df>
                  <df name="buffer">
                  </df>
                  <df name="buffer_cast">
                  </df>
                  <df name="buffer_copy">
                  </df>
                  <df name="buffer_size">
                  </df>
                  <df name="buffered_read_stream">
                    <df name="buffered_read_stream">
                    </df>
                    <df name="close">
                    </df>
                    <df name="fill">
                    </df>
                    <df name="in_avail">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="peek">
                    </df>
                    <df name="read_some">
                    </df>
                    <df name="write_some">
                    </df>
                  </df>
                  <df name="buffered_stream">
                    <df name="buffered_stream">
                    </df>
                    <df name="close">
                    </df>
                    <df name="fill">
                    </df>
                    <df name="flush">
                    </df>
                    <df name="in_avail">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="peek">
                    </df>
                    <df name="read_some">
                    </df>
                    <df name="write_some">
                    </df>
                  </df>
                  <df name="buffered_write_stream">
                    <df name="buffered_write_stream">
                    </df>
                    <df name="close">
                    </df>
                    <df name="flush">
                    </df>
                    <df name="in_avail">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="peek">
                    </df>
                    <df name="read_some">
                    </df>
                    <df name="write_some">
                    </df>
                  </df>
                  <df name="buffers_iterator">
                    <df name="operator_minus_">
                    </df>
                    <df name="operator_minus__minus_">
                    </df>
                    <df name="operator_plus_">
                    </df>
                    <df name="operator_plus__plus_">
                    </df>
                  </df>
                  <df name="connect">
                  </df>
                  <df name="const_buffer">
                    <df name="const_buffer">
                    </df>
                    <df name="operator_plus_">
                    </df>
                  </df>
                  <df name="const_buffers_1">
                    <df name="const_buffers_1">
                    </df>
                    <df name="operator_plus_">
                    </df>
                  </df>
                  <df name="coroutine">
                  </df>
                  <df name="datagram_socket_service">
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                  </df>
                  <df name="deadline_timer_service">
                    <df name="expires_at">
                    </df>
                    <df name="expires_from_now">
                    </df>
                  </df>
                  <df name="error__make_error_code">
                  </df>
                  <df name="generic__basic_endpoint">
                    <df name="basic_endpoint">
                    </df>
                    <df name="data">
                    </df>
                  </df>
                  <df name="generic__datagram_protocol">
                    <df name="datagram_protocol">
                    </df>
                  </df>
                  <df name="generic__raw_protocol">
                    <df name="raw_protocol">
                    </df>
                  </df>
                  <df name="generic__seq_packet_protocol">
                    <df name="seq_packet_protocol">
                    </df>
                  </df>
                  <df name="generic__stream_protocol">
                    <df name="stream_protocol">
                    </df>
                  </df>
                  <df name="handler_type">
                  </df>
                  <df name="invalid_service_owner">
                  </df>
                  <df name="io_service">
                    <df name="io_service">
                    </df>
                    <df name="poll">
                    </df>
                    <df name="poll_one">
                    </df>
                    <df name="run">
                    </df>
                    <df name="run_one">
                    </df>
                  </df>
                  <df name="io_service__id">
                  </df>
                  <df name="io_service__service">
                  </df>
                  <df name="io_service__strand">
                  </df>
                  <df name="io_service__work">
                    <df name="work">
                    </df>
                  </df>
                  <df name="ip__address">
                    <df name="address">
                    </df>
                    <df name="from_string">
                    </df>
                    <df name="operator_eq_">
                    </df>
                    <df name="to_string">
                    </df>
                  </df>
                  <df name="ip__address_v4">
                    <df name="address_v4">
                    </df>
                    <df name="broadcast">
                    </df>
                    <df name="from_string">
                    </df>
                    <df name="to_string">
                    </df>
                  </df>
                  <df name="ip__address_v6">
                    <df name="address_v6">
                    </df>
                    <df name="from_string">
                    </df>
                    <df name="scope_id">
                    </df>
                    <df name="to_string">
                    </df>
                  </df>
                  <df name="ip__basic_endpoint">
                    <df name="address">
                    </df>
                    <df name="basic_endpoint">
                    </df>
                    <df name="data">
                    </df>
                    <df name="port">
                    </df>
                  </df>
                  <df name="ip__basic_resolver">
                    <df name="async_resolve">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="resolve">
                    </df>
                  </df>
                  <df name="ip__basic_resolver_entry">
                    <df name="basic_resolver_entry">
                    </df>
                  </df>
                  <df name="ip__basic_resolver_iterator">
                    <df name="create">
                    </df>
                    <df name="operator_plus__plus_">
                    </df>
                  </df>
                  <df name="ip__basic_resolver_query">
                    <df name="basic_resolver_query">
                    </df>
                  </df>
                  <df name="ip__host_name">
                  </df>
                  <df name="ip__icmp">
                  </df>
                  <df name="ip__resolver_query_base">
                  </df>
                  <df name="ip__resolver_service">
                    <df name="async_resolve">
                    </df>
                    <df name="resolve">
                    </df>
                  </df>
                  <df name="ip__tcp">
                  </df>
                  <df name="ip__udp">
                  </df>
                  <df name="is_error_code_enum_lt__addrinfo_errors__gt_">
                  </df>
                  <df name="is_error_code_enum_lt__basic_errors__gt_">
                  </df>
                  <df name="is_error_code_enum_lt__misc_errors__gt_">
                  </df>
                  <df name="is_error_code_enum_lt__netdb_errors__gt_">
                  </df>
                  <df name="is_error_code_enum_lt__ssl_errors__gt_">
                  </df>
                  <df name="is_match_condition">
                  </df>
                  <df name="is_read_buffered">
                  </df>
                  <df name="is_write_buffered">
                  </df>
                  <df name="local__basic_endpoint">
                    <df name="basic_endpoint">
                    </df>
                    <df name="data">
                    </df>
                    <df name="path">
                    </df>
                  </df>
                  <df name="local__connect_pair">
                  </df>
                  <df name="local__datagram_protocol">
                  </df>
                  <df name="local__stream_protocol">
                  </df>
                  <df name="mutable_buffer">
                    <df name="mutable_buffer">
                    </df>
                    <df name="operator_plus_">
                    </df>
                  </df>
                  <df name="mutable_buffers_1">
                    <df name="mutable_buffers_1">
                    </df>
                    <df name="operator_plus_">
                    </df>
                  </df>
                  <df name="null_buffers">
                  </df>
                  <df name="posix__basic_descriptor">
                    <df name="assign">
                    </df>
                    <df name="basic_descriptor">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="io_control">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                  </df>
                  <df name="posix__basic_stream_descriptor">
                    <df name="assign">
                    </df>
                    <df name="basic_stream_descriptor">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="io_control">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                    <df name="read_some">
                    </df>
                    <df name="write_some">
                    </df>
                  </df>
                  <df name="posix__descriptor_base">
                  </df>
                  <df name="posix__stream_descriptor_service">
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                  </df>
                  <df name="raw_socket_service">
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                  </df>
                  <df name="read">
                  </df>
                  <df name="read_at">
                  </df>
                  <df name="read_until">
                  </df>
                  <df name="seq_packet_socket_service">
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                  </df>
                  <df name="serial_port_base">
                  </df>
                  <df name="serial_port_base__baud_rate">
                  </df>
                  <df name="serial_port_base__character_size">
                  </df>
                  <df name="serial_port_base__flow_control">
                  </df>
                  <df name="serial_port_base__parity">
                  </df>
                  <df name="serial_port_base__stop_bits">
                  </df>
                  <df name="serial_port_service">
                  </df>
                  <df name="service_already_exists">
                  </df>
                  <df name="signal_set_service">
                  </df>
                  <df name="socket_acceptor_service">
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                  </df>
                  <df name="socket_base">
                  </df>
                  <df name="spawn">
                  </df>
                  <df name="ssl__context">
                    <df name="add_certificate_authority">
                    </df>
                    <df name="add_verify_path">
                    </df>
                    <df name="clear_options">
                    </df>
                    <df name="context">
                    </df>
                    <df name="load_verify_file">
                    </df>
                    <df name="set_default_verify_paths">
                    </df>
                    <df name="set_options">
                    </df>
                    <df name="set_password_callback">
                    </df>
                    <df name="set_verify_callback">
                    </df>
                    <df name="set_verify_depth">
                    </df>
                    <df name="set_verify_mode">
                    </df>
                    <df name="use_certificate">
                    </df>
                    <df name="use_certificate_chain">
                    </df>
                    <df name="use_certificate_chain_file">
                    </df>
                    <df name="use_certificate_file">
                    </df>
                    <df name="use_private_key">
                    </df>
                    <df name="use_private_key_file">
                    </df>
                    <df name="use_rsa_private_key">
                    </df>
                    <df name="use_rsa_private_key_file">
                    </df>
                    <df name="use_tmp_dh">
                    </df>
                    <df name="use_tmp_dh_file">
                    </df>
                  </df>
                  <df name="ssl__context_base">
                  </df>
                  <df name="ssl__rfc2818_verification">
                  </df>
                  <df name="ssl__stream">
                    <df name="async_handshake">
                    </df>
                    <df name="handshake">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="next_layer">
                    </df>
                    <df name="read_some">
                    </df>
                    <df name="set_verify_callback">
                    </df>
                    <df name="set_verify_depth">
                    </df>
                    <df name="set_verify_mode">
                    </df>
                    <df name="shutdown">
                    </df>
                    <df name="write_some">
                    </df>
                  </df>
                  <df name="ssl__stream__impl_struct">
                  </df>
                  <df name="ssl__stream_base">
                  </df>
                  <df name="ssl__verify_context">
                  </df>
                  <df name="stream_socket_service">
                    <df name="native_non_blocking">
                    </df>
                    <df name="non_blocking">
                    </df>
                  </df>
                  <df name="time_traits_lt__ptime__gt_">
                  </df>
                  <df name="use_future_t">
                    <df name="use_future_t">
                    </df>
                  </df>
                  <df name="wait_traits">
                  </df>
                  <df name="waitable_timer_service">
                    <df name="expires_at">
                    </df>
                    <df name="expires_from_now">
                    </df>
                  </df>
                  <df name="windows__basic_handle">
                    <df name="assign">
                    </df>
                    <df name="basic_handle">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="lowest_layer">
                    </df>
                  </df>
                  <df name="windows__basic_object_handle">
                    <df name="assign">
                    </df>
                    <df name="basic_object_handle">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="wait">
                    </df>
                  </df>
                  <df name="windows__basic_random_access_handle">
                    <df name="assign">
                    </df>
                    <df name="basic_random_access_handle">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="read_some_at">
                    </df>
                    <df name="write_some_at">
                    </df>
                  </df>
                  <df name="windows__basic_stream_handle">
                    <df name="assign">
                    </df>
                    <df name="basic_stream_handle">
                    </df>
                    <df name="cancel">
                    </df>
                    <df name="close">
                    </df>
                    <df name="get_implementation">
                    </df>
                    <df name="get_service">
                    </df>
                    <df name="lowest_layer">
                    </df>
                    <df name="read_some">
                    </df>
                    <df name="write_some">
                    </df>
                  </df>
                  <df name="windows__object_handle_service">
                  </df>
                  <df name="windows__overlapped_ptr">
                    <df name="get">
                    </df>
                    <df name="overlapped_ptr">
                    </df>
                    <df name="reset">
                    </df>
                  </df>
                  <df name="windows__random_access_handle_service">
                  </df>
                  <df name="windows__stream_handle_service">
                  </df>
                  <df name="write">
                  </df>
                  <df name="write_at">
                  </df>
                </df>
                <df name="tutorial">
                  <df name="tutdaytime1">
                  </df>
                  <df name="tutdaytime2">
                  </df>
                  <df name="tutdaytime3">
                  </df>
                  <df name="tutdaytime4">
                  </df>
                  <df name="tutdaytime5">
                  </df>
                  <df name="tutdaytime6">
                  </df>
                  <df name="tutdaytime7">
                  </df>
                  <df name="tuttimer1">
                  </df>
                  <df name="tuttimer2">
                  </df>
                  <df name="tuttimer3">
                  </df>
                  <df name="tuttimer4">
                  </df>
                  <df name="tuttimer5">
                  </df>
                </df>
              </df>
              <df name="boost_lexical_cast">
              </df>
              <df name="boost_random">
              </df>
              <df name="boost_staticassert">
              </df>
              <df name="boost_tr1">
              </df>
              <df name="boost_typeerasure">
              </df>
              <df name="boost_typeindex">
              </df>
              <df name="boost_units">
              </df>
              <df name="boost_xpressive">
              </df>
              <df name="boostbook">
                <df name="dtd">
                </df>
                <df name="getting">
                </df>
              </df>
              <df name="chrono">
              </df>
              <df name="circular_buffer">
              </df>
              <df name="container">
              </df>
              <df name="date_time">
                <df name="examples">
                </df>
              </df>
              <df name="foreach">
              </df>
              <df name="function">
              </df>
              <df name="hash">
              </df>
              <df name="heap">
              </df>
              <df name="images">
                <df name="accumulators">
                </df>
                <df name="callouts">
                </df>
                <df name="random">
                </df>
              </df>
              <df name="interprocess">
              </df>
              <df name="intrusive">
              </df>
              <df name="jam">
              </df>
              <df name="lambda">
              </df>
              <df name="lockfree">
              </df>
              <df name="move">
              </df>
              <df name="mpi">
              </df>
              <df name="program_options">
              </df>
              <df name="property_tree">
              </df>
              <df name="proto">
              </df>
              <df name="quickbook">
                <df name="syntax">
                </df>
              </df>
              <df name="ratio">
              </df>
              <df name="signals">
              </df>
              <df name="signals2">
              </df>
              <df name="std">
              </df>
              <df name="string_algo">
              </df>
              <df name="thread">
              </df>
              <df name="tribool">
              </df>
              <df name="typeof">
              </df>
              <df name="unordered">
              </df>
              <df name="variant">
              </df>
              <df name="xpressive">
              </df>
            </df>
            <df name="images">
            </df>
            <df name="src">
              <df name="images">
                <df name="callouts">
                </df>
              </df>
            </df>
            <df name="test">
              <df name="gold">
                <df name="boost">
                  <df name="accumulators">
                    <df name="extract">
                    </df>
                    <df name="impl">
                    </df>
                    <df name="tag">
                    </df>
                  </df>
                </df>
                <df name="document_to_test_formatting">
                </df>
                <df name="images">
                  <df name="accumulators">
                  </df>
                </df>
              </df>
              <df name="html">
                <df name="images">
                </df>
              </df>
            </df>
          </df>
          <df name="libs">
            <df name="accumulators">
              <df name="example">
                <in>main.cpp</in>
              </df>
            </df>
            <df name="algorithm">
              <df name="doc">
                <df name="html">
                  <df name="algorithm">
                  </df>
                  <df name="boost">
                    <df name="algorithm">
                    </df>
                  </df>
                  <df name="header">
                    <df name="boost">
                      <df name="algorithm">
                        <df name="cxx11">
                        </df>
                        <df name="cxx14">
                        </df>
                        <df name="searching">
                        </df>
                      </df>
                    </df>
                  </df>
                  <df name="the_boost_algorithm_library">
                    <df name="CXX11">
                    </df>
                    <df name="CXX14">
                    </df>
                    <df name="Misc">
                    </df>
                    <df name="Searching">
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <in>clamp_example.cpp</in>
                <in>search_example.cpp</in>
              </df>
              <df name="minmax">
                <df name="doc">
                </df>
                <df name="example">
                  <in>minmax_ex.cpp</in>
                  <in>minmax_timer.cpp</in>
                </df>
              </df>
              <df name="string">
                <df name="doc">
                </df>
                <df name="example">
                  <in>conv_example.cpp</in>
                  <in>find_example.cpp</in>
                  <in>predicate_example.cpp</in>
                  <in>regex_example.cpp</in>
                  <in>replace_example.cpp</in>
                  <in>rle_example.cpp</in>
                  <in>split_example.cpp</in>
                  <in>trim_example.cpp</in>
                </df>
              </df>
            </df>
            <df name="align">
              <df name="example">
                <in>aligned_ptr.hpp</in>
                <in>aligned_vector.hpp</in>
                <in>make_aligned.hpp</in>
              </df>
            </df>
            <df name="any">
            </df>
            <df name="array">
            </df>
            <df name="asio">
              <df name="doc">
                <df name="overview">
                </df>
              </df>
              <df name="example">
                <df name="cpp03">
                  <df name="allocation">
                    <in>server.cpp</in>
                  </df>
                  <df name="buffers">
                    <in>reference_counted.cpp</in>
                  </df>
                  <df name="chat">
                    <in>chat_client.cpp</in>
                    <in>chat_message.hpp</in>
                    <in>chat_server.cpp</in>
                    <in>posix_chat_client.cpp</in>
                  </df>
                  <df name="echo">
                    <in>async_tcp_echo_server.cpp</in>
                    <in>async_udp_echo_server.cpp</in>
                    <in>blocking_tcp_echo_client.cpp</in>
                    <in>blocking_tcp_echo_server.cpp</in>
                    <in>blocking_udp_echo_client.cpp</in>
                    <in>blocking_udp_echo_server.cpp</in>
                  </df>
                  <df name="fork">
                    <in>daemon.cpp</in>
                    <in>process_per_connection.cpp</in>
                  </df>
                  <df name="http">
                    <df name="client">
                      <in>async_client.cpp</in>
                      <in>sync_client.cpp</in>
                    </df>
                    <df name="doc_root">
                    </df>
                    <df name="server">
                      <in>connection.cpp</in>
                      <in>connection.hpp</in>
                      <in>connection_manager.cpp</in>
                      <in>connection_manager.hpp</in>
                      <in>header.hpp</in>
                      <in>main.cpp</in>
                      <in>mime_types.cpp</in>
                      <in>mime_types.hpp</in>
                      <in>reply.cpp</in>
                      <in>reply.hpp</in>
                      <in>request.hpp</in>
                      <in>request_handler.cpp</in>
                      <in>request_handler.hpp</in>
                      <in>request_parser.cpp</in>
                      <in>request_parser.hpp</in>
                      <in>server.cpp</in>
                      <in>server.hpp</in>
                    </df>
                    <df name="server2">
                      <in>connection.cpp</in>
                      <in>connection.hpp</in>
                      <in>header.hpp</in>
                      <in>io_service_pool.cpp</in>
                      <in>io_service_pool.hpp</in>
                      <in>main.cpp</in>
                      <in>mime_types.cpp</in>
                      <in>mime_types.hpp</in>
                      <in>reply.cpp</in>
                      <in>reply.hpp</in>
                      <in>request.hpp</in>
                      <in>request_handler.cpp</in>
                      <in>request_handler.hpp</in>
                      <in>request_parser.cpp</in>
                      <in>request_parser.hpp</in>
                      <in>server.cpp</in>
                      <in>server.hpp</in>
                    </df>
                    <df name="server3">
                      <in>connection.cpp</in>
                      <in>connection.hpp</in>
                      <in>header.hpp</in>
                      <in>main.cpp</in>
                      <in>mime_types.cpp</in>
                      <in>mime_types.hpp</in>
                      <in>reply.cpp</in>
                      <in>reply.hpp</in>
                      <in>request.hpp</in>
                      <in>request_handler.cpp</in>
                      <in>request_handler.hpp</in>
                      <in>request_parser.cpp</in>
                      <in>request_parser.hpp</in>
                      <in>server.cpp</in>
                      <in>server.hpp</in>
                    </df>
                    <df name="server4">
                      <in>file_handler.cpp</in>
                      <in>file_handler.hpp</in>
                      <in>header.hpp</in>
                      <in>main.cpp</in>
                      <in>mime_types.cpp</in>
                      <in>mime_types.hpp</in>
                      <in>reply.cpp</in>
                      <in>reply.hpp</in>
                      <in>request.hpp</in>
                      <in>request_parser.cpp</in>
                      <in>request_parser.hpp</in>
                      <in>server.cpp</in>
                      <in>server.hpp</in>
                    </df>
                  </df>
                  <df name="icmp">
                    <in>icmp_header.hpp</in>
                    <in>ipv4_header.hpp</in>
                    <in>ping.cpp</in>
                  </df>
                  <df name="invocation">
                    <in>prioritised_handlers.cpp</in>
                  </df>
                  <df name="iostreams">
                    <in>daytime_client.cpp</in>
                    <in>daytime_server.cpp</in>
                    <in>http_client.cpp</in>
                  </df>
                  <df name="local">
                    <in>connect_pair.cpp</in>
                    <in>iostream_client.cpp</in>
                    <in>stream_client.cpp</in>
                    <in>stream_server.cpp</in>
                  </df>
                  <df name="multicast">
                    <in>receiver.cpp</in>
                    <in>sender.cpp</in>
                  </df>
                  <df name="nonblocking">
                    <in>third_party_lib.cpp</in>
                  </df>
                  <df name="porthopper">
                    <in>client.cpp</in>
                    <in>protocol.hpp</in>
                    <in>server.cpp</in>
                  </df>
                  <df name="serialization">
                    <in>client.cpp</in>
                    <in>connection.hpp</in>
                    <in>server.cpp</in>
                    <in>stock.hpp</in>
                  </df>
                  <df name="services">
                    <in>basic_logger.hpp</in>
                    <in>daytime_client.cpp</in>
                    <in>logger.hpp</in>
                    <in>logger_service.cpp</in>
                    <in>logger_service.hpp</in>
                    <in>stream_socket_service.hpp</in>
                  </df>
                  <df name="socks4">
                    <in>socks4.hpp</in>
                    <in>sync_client.cpp</in>
                  </df>
                  <df name="spawn">
                    <in>echo_server.cpp</in>
                  </df>
                  <df name="ssl">
                    <in>client.cpp</in>
                    <in>server.cpp</in>
                  </df>
                  <df name="timeouts">
                    <in>async_tcp_client.cpp</in>
                    <in>blocking_tcp_client.cpp</in>
                    <in>blocking_udp_client.cpp</in>
                    <in>server.cpp</in>
                  </df>
                  <df name="timers">
                    <in>tick_count_timer.cpp</in>
                    <in>time_t_timer.cpp</in>
                  </df>
                  <df name="tutorial">
                    <df name="daytime1">
                      <in>client.cpp</in>
                    </df>
                    <df name="daytime2">
                      <in>server.cpp</in>
                    </df>
                    <df name="daytime3">
                      <in>server.cpp</in>
                    </df>
                    <df name="daytime4">
                      <in>client.cpp</in>
                    </df>
                    <df name="daytime5">
                      <in>server.cpp</in>
                    </df>
                    <df name="daytime6">
                      <in>server.cpp</in>
                    </df>
                    <df name="daytime7">
                      <in>server.cpp</in>
                    </df>
                    <df name="timer1">
                      <in>timer.cpp</in>
                    </df>
                    <df name="timer2">
                      <in>timer.cpp</in>
                    </df>
                    <df name="timer3">
                      <in>timer.cpp</in>
                    </df>
                    <df name="timer4">
                      <in>timer.cpp</in>
                    </df>
                    <df name="timer5">
                      <in>timer.cpp</in>
                    </df>
                  </df>
                  <df name="windows">
                    <in>transmit_file.cpp</in>
                  </df>
                </df>
                <df name="cpp11">
                  <df name="allocation">
                    <in>server.cpp</in>
                  </df>
                  <df name="buffers">
                    <in>reference_counted.cpp</in>
                  </df>
                  <df name="chat">
                    <in>chat_client.cpp</in>
                    <in>chat_message.hpp</in>
                    <in>chat_server.cpp</in>
                  </df>
                  <df name="echo">
                    <in>async_tcp_echo_server.cpp</in>
                    <in>async_udp_echo_server.cpp</in>
                    <in>blocking_tcp_echo_client.cpp</in>
                    <in>blocking_tcp_echo_server.cpp</in>
                    <in>blocking_udp_echo_client.cpp</in>
                    <in>blocking_udp_echo_server.cpp</in>
                  </df>
                  <df name="futures">
                    <in>daytime_client.cpp</in>
                  </df>
                  <df name="http">
                    <df name="server">
                      <in>connection.cpp</in>
                      <in>connection.hpp</in>
                      <in>connection_manager.cpp</in>
                      <in>connection_manager.hpp</in>
                      <in>header.hpp</in>
                      <in>main.cpp</in>
                      <in>mime_types.cpp</in>
                      <in>mime_types.hpp</in>
                      <in>reply.cpp</in>
                      <in>reply.hpp</in>
                      <in>request.hpp</in>
                      <in>request_handler.cpp</in>
                      <in>request_handler.hpp</in>
                      <in>request_parser.cpp</in>
                      <in>request_parser.hpp</in>
                      <in>server.cpp</in>
                      <in>server.hpp</in>
                    </df>
                  </df>
                  <df name="spawn">
                    <in>echo_server.cpp</in>
                  </df>
                </df>
              </df>
            </df>
            <df name="assert">
            </df>
            <df name="assign">
              <df name="doc">
              </df>
            </df>
            <df name="atomic">
              <df name="doc">
              </df>
            </df>
            <df name="bimap">
              <df name="doc">
                <df name="html">
                  <df name="boost_bimap">
                    <df name="bimap_and_boost">
                    </df>
                    <df name="examples">
                    </df>
                    <df name="history">
                    </df>
                    <df name="rationale">
                    </df>
                    <df name="reference">
                    </df>
                    <df name="the_tutorial">
                    </df>
                  </df>
                  <df name="images">
                    <df name="bimap">
                    </df>
                    <df name="callouts">
                    </df>
                    <df name="extern">
                    </df>
                    <df name="people">
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="bimap_and_boost">
                  <in>assign.cpp</in>
                  <in>foreach.cpp</in>
                  <in>lambda.cpp</in>
                  <in>property_map.cpp</in>
                  <in>range.cpp</in>
                  <in>serialization.cpp</in>
                  <in>typeof.cpp</in>
                  <in>xpressive.cpp</in>
                </df>
                <df name="mi_to_b_path">
                  <in>bidirectional_map.cpp</in>
                  <in>hashed_indices.cpp</in>
                  <in>mi_bidirectional_map.cpp</in>
                  <in>mi_hashed_indices.cpp</in>
                  <in>tagged_bidirectional_map.cpp</in>
                </df>
                <in>at_function_examples.cpp</in>
                <in>mighty_bimap.cpp</in>
                <in>population_bimap.cpp</in>
                <in>projection.cpp</in>
                <in>repetitions_counter.cpp</in>
                <in>simple_bimap.cpp</in>
                <in>standard_map_comparison.cpp</in>
                <in>step_by_step.cpp</in>
                <in>tagged_simple_bimap.cpp</in>
                <in>tutorial_info_hook.cpp</in>
                <in>tutorial_modify_and_replace.cpp</in>
                <in>tutorial_range.cpp</in>
                <in>unconstrained_collection.cpp</in>
                <in>user_defined_names.cpp</in>
              </df>
            </df>
            <df name="bind">
              <df name="doc">
                <df name="html">
                </df>
              </df>
            </df>
            <df name="chrono">
              <df name="doc">
              </df>
              <df name="example">
                <in>await_keystroke.cpp</in>
                <in>chrono_accuracy_test.cpp</in>
                <in>chrono_unit_test.cpp</in>
                <in>clock_name.cpp</in>
                <in>clock_name.hpp</in>
                <in>cycle_count.cpp</in>
                <in>explore_limits.cpp</in>
                <in>french.cpp</in>
                <in>i_dont_like_the_default_duration_behavior.cpp</in>
                <in>io_ex1.cpp</in>
                <in>io_ex2.cpp</in>
                <in>io_ex3.cpp</in>
                <in>io_ex4.cpp</in>
                <in>io_ex5.cpp</in>
                <in>manipulate_clock_object.cpp</in>
                <in>min_time_point.cpp</in>
                <in>miscellaneous.cpp</in>
                <in>rounding.cpp</in>
                <in>run_timer_example.cpp</in>
                <in>run_timer_example2.cpp</in>
                <in>runtime_resolution.cpp</in>
                <in>saturating.cpp</in>
                <in>simulated_thread_interface_demo.cpp</in>
                <in>test_clock.cpp</in>
                <in>test_clock2.cpp</in>
                <in>test_duration.cpp</in>
                <in>test_minmax.cpp</in>
                <in>test_special_values.cpp</in>
                <in>test_thread_clock.cpp</in>
                <in>time2_demo.cpp</in>
                <in>timer.hpp</in>
                <in>timeval_demo.cpp</in>
                <in>xtime.cpp</in>
              </df>
              <df name="stopwatches">
                <df name="example">
                  <in>stopwatch_example.cpp</in>
                  <in>stopwatch_reporter_example.cpp</in>
                </df>
              </df>
            </df>
            <df name="circular_buffer">
              <df name="doc">
                <df name="images">
                </df>
              </df>
              <df name="example">
                <in>bounded_buffer_comparison.cpp</in>
                <in>circular_buffer_bound_example.cpp</in>
                <in>circular_buffer_example.cpp</in>
                <in>circular_buffer_iter_example.cpp</in>
                <in>circular_buffer_sum_example.cpp</in>
              </df>
            </df>
            <df name="compatibility">
            </df>
            <df name="concept_check">
            </df>
            <df name="config">
              <df name="doc">
                <df name="html">
                  <df name="boost_config">
                  </df>
                </df>
              </df>
            </df>
            <df name="container">
              <df name="doc">
                <df name="html">
                  <df name="images">
                  </df>
                </df>
              </df>
              <df name="example">
                <in>doc_custom_tree.cpp</in>
                <in>doc_emplace.cpp</in>
                <in>doc_extended_allocators.cpp</in>
                <in>doc_move_containers.cpp</in>
                <in>doc_recursive_containers.cpp</in>
                <in>doc_type_erasure.cpp</in>
              </df>
            </df>
            <df name="context">
              <df name="doc">
                <df name="html">
                  <df name="context">
                    <df name="architectures">
                    </df>
                    <df name="context">
                    </df>
                    <df name="econtext">
                      <df name="rationale">
                      </df>
                      <df name="stack">
                      </df>
                    </df>
                    <df name="rationale">
                    </df>
                    <df name="stack">
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="execution_context">
                  <in>cycle.cpp</in>
                  <in>fibonacci.cpp</in>
                  <in>jump.cpp</in>
                  <in>parameter.cpp</in>
                  <in>parser.cpp</in>
                  <in>segmented.cpp</in>
                </df>
                <in>echosse.cpp</in>
                <in>exception.cpp</in>
                <in>exit.cpp</in>
                <in>jump.cpp</in>
                <in>rethrow.cpp</in>
                <in>simple_stack_allocator.hpp</in>
                <in>stacked.cpp</in>
                <in>transfer.cpp</in>
              </df>
            </df>
            <df name="conversion">
            </df>
            <df name="convert">
              <df name="doc">
                <df name="html">
                  <df name="boost">
                    <df name="cnv">
                      <df name="basic_stream">
                      </df>
                    </df>
                  </df>
                  <df name="boost_convert">
                    <df name="converters_detail">
                      <df name="__boost__cnv__strtol__converter">
                        <df name="formatting_support">
                        </df>
                        <df name="supported_string_types">
                        </df>
                      </df>
                      <df name="stream_converter">
                        <df name="supported_string_types">
                        </df>
                      </df>
                    </df>
                    <df name="design_notes">
                    </df>
                    <df name="getting_started">
                    </df>
                    <df name="performance">
                    </df>
                    <df name="supporting_tools">
                    </df>
                  </df>
                  <df name="header">
                    <df name="boost">
                      <df name="convert">
                      </df>
                    </df>
                  </df>
                  <df name="index">
                  </df>
                </df>
              </df>
              <df name="example">
                <in>algorithms.cpp</in>
                <in>default_converter.cpp</in>
                <in>default_converter_fail.cpp</in>
                <in>getting_serious.cpp</in>
                <in>getting_started.cpp</in>
                <in>lexical_cast.cpp</in>
                <in>stream.cpp</in>
              </df>
            </df>
            <df name="core">
              <df name="doc">
                <df name="html">
                  <df name="boost">
                  </df>
                  <df name="core">
                  </df>
                </df>
              </df>
            </df>
            <df name="coroutine">
              <df name="doc">
                <df name="html">
                  <df name="coroutine">
                    <df name="coroutine">
                      <df name="asymmetric">
                      </df>
                      <df name="symmetric">
                      </df>
                    </df>
                    <df name="stack">
                    </df>
                  </df>
                </df>
                <df name="images">
                </df>
              </df>
              <df name="example">
                <df name="cpp03">
                  <df name="asymmetric">
                    <in>X.h</in>
                    <in>chaining.cpp</in>
                    <in>echo.cpp</in>
                    <in>exception.cpp</in>
                    <in>fibonacci.cpp</in>
                    <in>layout.cpp</in>
                    <in>parallel.cpp</in>
                    <in>power.cpp</in>
                    <in>same_fringe.cpp</in>
                    <in>segmented_stack.cpp</in>
                    <in>simple.cpp</in>
                    <in>test.cpp</in>
                    <in>tree.h</in>
                    <in>unwind.cpp</in>
                  </df>
                  <df name="symmetric">
                    <in>dice_game.cpp</in>
                    <in>merge_arrays.cpp</in>
                    <in>segmented_stack.cpp</in>
                    <in>simple.cpp</in>
                    <in>unwind.cpp</in>
                  </df>
                </df>
                <df name="cpp11">
                  <df name="asymmetric">
                    <in>await_emu.cpp</in>
                    <in>fibonacci.cpp</in>
                    <in>iterator_range.cpp</in>
                    <in>layout.cpp</in>
                    <in>same_fringe.cpp</in>
                    <in>tree.h</in>
                  </df>
                  <df name="symmetric">
                    <in>merge_arrays.cpp</in>
                    <in>simple.cpp</in>
                  </df>
                </df>
              </df>
            </df>
            <df name="coroutine2">
              <df name="doc">
                <df name="html">
                  <df name="coroutine2">
                    <df name="coroutine">
                      <df name="asymmetric">
                      </df>
                    </df>
                    <df name="stack">
                    </df>
                  </df>
                </df>
                <df name="images">
                </df>
              </df>
              <df name="example">
                <in>fibonacci.cpp</in>
                <in>layout.cpp</in>
                <in>parser.cpp</in>
                <in>same_fringe.cpp</in>
                <in>segmented.cpp</in>
                <in>simple.cpp</in>
                <in>tree.h</in>
              </df>
            </df>
            <df name="crc">
            </df>
            <df name="date_time">
              <df name="doc">
              </df>
              <df name="example">
                <df name="gregorian">
                  <in>date_serialization_demo.cpp</in>
                  <in>dates_as_strings.cpp</in>
                  <in>days_alive.cpp</in>
                  <in>days_between_new_years.cpp</in>
                  <in>days_since_year_start.cpp</in>
                  <in>days_till_new_year.cpp</in>
                  <in>end_of_month_day.cpp</in>
                  <in>find_last_day_of_months.cpp</in>
                  <in>localization.cpp</in>
                  <in>month_add.cpp</in>
                  <in>period_calc.cpp</in>
                  <in>print_holidays.cpp</in>
                  <in>print_month.cpp</in>
                </df>
                <df name="local_time">
                  <in>calc_rules.cpp</in>
                  <in>flight.cpp</in>
                  <in>local_date_time.cpp</in>
                  <in>seconds_since_epoch.cpp</in>
                  <in>simple_time_zone.cpp</in>
                </df>
                <df name="posix_time">
                  <in>local_utc_conversion.cpp</in>
                  <in>print_hours.cpp</in>
                  <in>time_math.cpp</in>
                  <in>time_periods.cpp</in>
                </df>
                <df name="tutorial">
                  <in>io_tutorial.cpp</in>
                </df>
              </df>
              <df name="xmldoc">
              </df>
            </df>
            <df name="disjoint_sets">
            </df>
            <df name="dynamic_bitset">
              <df name="example">
                <in>example1.cpp</in>
                <in>example2.cpp</in>
                <in>example3.cpp</in>
                <in>timing_tests.cpp</in>
              </df>
            </df>
            <df name="endian">
              <df name="doc">
              </df>
              <df name="example">
                <in>conversion_use_case.cpp</in>
                <in>endian_example.cpp</in>
                <in>third_party_format.hpp</in>
                <in>udt_conversion_example.cpp</in>
                <in>use_cases.cpp</in>
              </df>
            </df>
            <df name="exception">
              <df name="doc">
              </df>
              <df name="example">
                <in>cloning_1.cpp</in>
                <in>cloning_2.cpp</in>
                <in>enable_error_info.cpp</in>
                <in>errinfos.cpp</in>
                <in>error_info_1.cpp</in>
                <in>error_info_2.cpp</in>
                <in>example_io.cpp</in>
                <in>info_tuple.cpp</in>
                <in>logging.cpp</in>
              </df>
            </df>
            <df name="filesystem">
              <df name="bug">
              </df>
              <df name="doc">
              </df>
              <df name="example">
                <df name="msvc">
                  <df name="path_info">
                  </df>
                  <df name="tut1">
                  </df>
                  <df name="tut2">
                  </df>
                  <df name="tut3">
                  </df>
                  <df name="tut4">
                  </df>
                  <df name="tut5">
                  </df>
                </df>
                <df name="test">
                </df>
                <in>error_demo.cpp</in>
                <in>file_size.cpp</in>
                <in>file_status.cpp</in>
                <in>mbcopy.cpp</in>
                <in>mbpath.cpp</in>
                <in>mbpath.hpp</in>
                <in>path_info.cpp</in>
                <in>simple_ls.cpp</in>
                <in>stems.cpp</in>
                <in>tchar.cpp</in>
                <in>tut0.cpp</in>
                <in>tut1.cpp</in>
                <in>tut2.cpp</in>
                <in>tut3.cpp</in>
                <in>tut4.cpp</in>
                <in>tut5.cpp</in>
                <in>tut6a.cpp</in>
                <in>tut6b.cpp</in>
                <in>tut6c.cpp</in>
              </df>
            </df>
            <df name="flyweight">
              <df name="doc">
                <df name="reference">
                </df>
                <df name="tutorial">
                </df>
              </df>
              <df name="example">
                <in>basic.cpp</in>
                <in>composite.cpp</in>
                <in>custom_factory.cpp</in>
                <in>fibonacci.cpp</in>
                <in>html.cpp</in>
                <in>key_value.cpp</in>
                <in>perf.cpp</in>
                <in>serialization.cpp</in>
              </df>
            </df>
            <df name="foreach">
            </df>
            <df name="format">
              <df name="doc">
              </df>
              <df name="example">
                <in>sample_advanced.cpp</in>
                <in>sample_formats.cpp</in>
                <in>sample_new_features.cpp</in>
                <in>sample_userType.cpp</in>
              </df>
            </df>
            <df name="function">
              <df name="example">
                <in>bind1st.cpp</in>
                <in>int_div.cpp</in>
                <in>sum_avg.cpp</in>
              </df>
            </df>
            <df name="function_types">
              <df name="doc">
                <df name="html">
                  <df name="boost_functiontypes">
                    <df name="reference">
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="detail">
                  <in>param_type.hpp</in>
                </df>
                <in>fast_mem_fn.hpp</in>
                <in>fast_mem_fn_example.cpp</in>
                <in>interface.hpp</in>
                <in>interface_example.cpp</in>
                <in>interpreter.hpp</in>
                <in>interpreter_example.cpp</in>
                <in>macro_type_args.hpp</in>
                <in>macro_type_args_example.cpp</in>
                <in>result_of.hpp</in>
                <in>result_of_example.cpp</in>
              </df>
            </df>
            <df name="functional">
              <df name="factory">
                <df name="doc">
                  <df name="html">
                  </df>
                </df>
              </df>
              <df name="forward">
                <df name="doc">
                  <df name="html">
                  </df>
                </df>
              </df>
              <df name="hash">
              </df>
              <df name="overloaded_function">
                <df name="doc">
                  <df name="html">
                    <df name="boost">
                    </df>
                    <df name="boost_functional_overloadedfunction">
                    </df>
                  </df>
                </df>
              </df>
            </df>
            <df name="fusion">
              <df name="doc">
                <df name="html">
                  <df name="fusion">
                    <df name="adapted">
                    </df>
                    <df name="algorithm">
                      <df name="auxiliary">
                        <df name="functions">
                        </df>
                        <df name="metafunctions">
                        </df>
                      </df>
                      <df name="iteration">
                        <df name="functions">
                        </df>
                        <df name="metafunctions">
                        </df>
                      </df>
                      <df name="query">
                        <df name="functions">
                        </df>
                        <df name="metafunctions">
                        </df>
                      </df>
                      <df name="transformation">
                        <df name="functions">
                        </df>
                        <df name="metafunctions">
                        </df>
                      </df>
                    </df>
                    <df name="container">
                      <df name="conversion">
                        <df name="functions">
                        </df>
                        <df name="metafunctions">
                        </df>
                      </df>
                      <df name="generation">
                        <df name="functions">
                        </df>
                        <df name="metafunctions">
                        </df>
                      </df>
                    </df>
                    <df name="extension">
                    </df>
                    <df name="functional">
                      <df name="adapters">
                      </df>
                      <df name="concepts">
                      </df>
                      <df name="generation">
                        <df name="functions">
                        </df>
                        <df name="metafunctions">
                        </df>
                      </df>
                      <df name="invocation">
                        <df name="functions">
                        </df>
                        <df name="metafunctions">
                        </df>
                      </df>
                    </df>
                    <df name="iterator">
                      <df name="concepts">
                      </df>
                      <df name="functions">
                      </df>
                      <df name="metafunctions">
                      </df>
                      <df name="operator">
                      </df>
                    </df>
                    <df name="sequence">
                      <df name="concepts">
                      </df>
                      <df name="intrinsic">
                        <df name="functions">
                        </df>
                        <df name="metafunctions">
                        </df>
                      </df>
                      <df name="operator">
                        <df name="comparison">
                        </df>
                        <df name="i_o">
                        </df>
                      </df>
                    </df>
                    <df name="support">
                    </df>
                    <df name="tuple">
                      <df name="class_template_tuple">
                      </df>
                    </df>
                    <df name="view">
                    </df>
                  </df>
                  <df name="images">
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="cookbook">
                  <in>do_the_bind.cpp</in>
                  <in>fill_em_up.cpp</in>
                </df>
                <df name="extension">
                  <df name="detail">
                    <in>advance_impl.hpp</in>
                    <in>at_impl.hpp</in>
                    <in>at_key_impl.hpp</in>
                    <in>begin_impl.hpp</in>
                    <in>category_of_impl.hpp</in>
                    <in>deref_data_impl.hpp</in>
                    <in>deref_impl.hpp</in>
                    <in>distance_impl.hpp</in>
                    <in>end_impl.hpp</in>
                    <in>equal_to_impl.hpp</in>
                    <in>has_key_impl.hpp</in>
                    <in>is_sequence_impl.hpp</in>
                    <in>is_view_impl.hpp</in>
                    <in>key_of_impl.hpp</in>
                    <in>next_impl.hpp</in>
                    <in>prior_impl.hpp</in>
                    <in>size_impl.hpp</in>
                    <in>value_at_impl.hpp</in>
                    <in>value_at_key_impl.hpp</in>
                    <in>value_of_data_impl.hpp</in>
                    <in>value_of_impl.hpp</in>
                  </df>
                  <in>example_struct.hpp</in>
                  <in>example_struct_iterator.hpp</in>
                  <in>example_struct_type.hpp</in>
                  <in>tag_of.hpp</in>
                  <in>test_example.cpp</in>
                  <in>triple.cpp</in>
                </df>
                <df name="performance">
                  <in>accumulate.cpp</in>
                  <in>functional.cpp</in>
                  <in>inner_product.cpp</in>
                  <in>inner_product2.cpp</in>
                  <in>measure.hpp</in>
                  <in>sequence_efficiency.cpp</in>
                  <in>zip_efficiency.cpp</in>
                </df>
              </df>
            </df>
            <df name="geometry">
              <df name="doc">
                <df name="doxy">
                  <df name="doxygen_input">
                    <df name="images">
                      <df name="source">
                      </df>
                    </df>
                  </df>
                  <df name="doxygen_output">
                    <df name="html">
                      <df name="images">
                      </df>
                    </df>
                  </df>
                </df>
                <df name="html">
                  <df name="geometry">
                    <df name="examples">
                    </df>
                    <df name="reference">
                      <df name="access">
                        <df name="exterior_ring">
                        </df>
                        <df name="get">
                        </df>
                        <df name="interior_rings">
                        </df>
                        <df name="set">
                        </df>
                      </df>
                      <df name="adapted">
                        <df name="boost_polygon">
                        </df>
                        <df name="boost_range">
                        </df>
                        <df name="register">
                        </df>
                      </df>
                      <df name="algorithms">
                        <df name="area">
                        </df>
                        <df name="assign">
                        </df>
                        <df name="buffer">
                        </df>
                        <df name="centroid">
                        </df>
                        <df name="covered_by">
                        </df>
                        <df name="distance">
                        </df>
                        <df name="envelope">
                        </df>
                        <df name="for_each">
                        </df>
                        <df name="intersects">
                        </df>
                        <df name="is_valid">
                        </df>
                        <df name="length">
                        </df>
                        <df name="make">
                        </df>
                        <df name="perimeter">
                        </df>
                        <df name="simplify">
                        </df>
                        <df name="touches">
                        </df>
                        <df name="transform">
                        </df>
                        <df name="within">
                        </df>
                      </df>
                      <df name="arithmetic">
                      </df>
                      <df name="concepts">
                      </df>
                      <df name="constants">
                      </df>
                      <df name="core">
                      </df>
                      <df name="cs">
                      </df>
                      <df name="de9im">
                      </df>
                      <df name="enumerations">
                      </df>
                      <df name="exceptions">
                      </df>
                      <df name="io">
                        <df name="svg">
                        </df>
                        <df name="wkt">
                        </df>
                      </df>
                      <df name="iterators">
                      </df>
                      <df name="models">
                      </df>
                      <df name="spatial_indexes">
                        <df name="boost__geometry__index__rtree">
                        </df>
                        <df name="group__adaptors">
                        </df>
                        <df name="group__inserters">
                        </df>
                        <df name="group__predicates">
                        </df>
                        <df name="group__rtree__functions">
                        </df>
                        <df name="observers">
                        </df>
                        <df name="parameters">
                        </df>
                      </df>
                      <df name="strategies">
                      </df>
                      <df name="views">
                      </df>
                    </df>
                    <df name="spatial_indexes">
                      <df name="rtree_examples">
                      </df>
                    </df>
                  </df>
                  <df name="img">
                    <df name="algorithms">
                    </df>
                    <df name="index">
                      <df name="rtree">
                      </df>
                    </df>
                    <df name="io">
                    </df>
                    <df name="strategies">
                    </df>
                  </df>
                </df>
                <df name="other">
                  <df name="logo">
                  </df>
                </df>
                <df name="src">
                  <df name="docutils">
                    <df name="tools">
                      <df name="doxygen_xml2qbk">
                        <df name="contrib">
                          <df name="rapidxml-1.13">
                          </df>
                        </df>
                      </df>
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="data">
                </df>
                <df name="with_external_libs">
                  <df name="contrib">
                    <df name="gd-2.0.35">
                    </df>
                    <df name="shapelib-1.3.0b2">
                    </df>
                    <df name="soci-3.1.0">
                    </df>
                  </df>
                  <in>x01_qt_example.cpp</in>
                  <in>x02_gd_example.cpp</in>
                  <in>x03_a_soci_example.cpp</in>
                  <in>x03_b_soci_example.cpp</in>
                  <in>x03_c_soci_example.cpp</in>
                  <in>x03_d_soci_example.cpp</in>
                  <in>x04_wxwidgets_world_mapper.cpp</in>
                  <in>x05_shapelib_example.cpp</in>
                  <in>x06_qt_world_mapper.cpp</in>
                </df>
                <in>01_point_example.cpp</in>
                <in>02_linestring_example.cpp</in>
                <in>03_polygon_example.cpp</in>
                <in>04_boost_example.cpp</in>
                <in>05_a_overlay_polygon_example.cpp</in>
                <in>05_b_overlay_linestring_polygon_example.cpp</in>
                <in>06_a_transformation_example.cpp</in>
                <in>06_b_transformation_example.cpp</in>
                <in>07_a_graph_route_example.cpp</in>
                <in>07_b_graph_route_example.cpp</in>
                <in>c01_custom_point_example.cpp</in>
                <in>c02_custom_box_example.cpp</in>
                <in>c03_custom_linestring_example.cpp</in>
                <in>c04_a_custom_triangle_example.cpp</in>
                <in>c04_b_custom_triangle_example.cpp</in>
                <in>c05_custom_point_pointer_example.cpp</in>
                <in>c06_custom_polygon_example.cpp</in>
                <in>c07_custom_ring_pointer_example.cpp</in>
                <in>c08_custom_non_std_example.cpp</in>
                <in>c09_custom_fusion_example.cpp</in>
                <in>c10_custom_cs_example.cpp</in>
                <in>c11_custom_cs_transform_example.cpp</in>
                <in>ml01_multipolygon_simplify.cpp</in>
                <in>ml02_distance_strategy.cpp</in>
              </df>
              <df name="index">
                <df name="example">
                  <in>3d_benchmark.cpp</in>
                  <in>benchmark.cpp</in>
                  <in>benchmark2.cpp</in>
                  <in>benchmark3.cpp</in>
                  <in>benchmark_experimental.cpp</in>
                  <in>benchmark_insert.cpp</in>
                  <in>glut_vis.cpp</in>
                  <in>random_test.cpp</in>
                  <in>serialize.cpp</in>
                </df>
              </df>
            </df>
            <df name="gil">
              <df name="doc">
                <df name="html">
                </df>
              </df>
              <df name="example">
                <in>affine.cpp</in>
                <in>convolution.cpp</in>
                <in>dynamic_image.cpp</in>
                <in>histogram.cpp</in>
                <in>interleaved_ptr.cpp</in>
                <in>interleaved_ptr.hpp</in>
                <in>interleaved_ref.hpp</in>
                <in>mandelbrot.cpp</in>
                <in>packed_pixel.cpp</in>
                <in>resize.cpp</in>
                <in>x_gradient.cpp</in>
              </df>
            </df>
            <df name="graph">
              <df name="doc">
                <df name="figs">
                </df>
              </df>
              <df name="example">
                <df name="figs">
                </df>
                <in>accum-compile-times.cpp</in>
                <in>actor_clustering.cpp</in>
                <in>adj_list_ra_edgelist.cpp</in>
                <in>adjacency_list.cpp</in>
                <in>adjacency_list_io.cpp</in>
                <in>adjacency_matrix.cpp</in>
                <in>astar-cities.cpp</in>
                <in>astar_maze.cpp</in>
                <in>bellman-example.cpp</in>
                <in>bellman-ford-internet.cpp</in>
                <in>bfs-example.cpp</in>
                <in>bfs-example2.cpp</in>
                <in>bfs-name-printer.cpp</in>
                <in>bfs.cpp</in>
                <in>bfs_neighbor.cpp</in>
                <in>biconnected_components.cpp</in>
                <in>bipartite_example.cpp</in>
                <in>boost_web_graph.cpp</in>
                <in>boykov_kolmogorov-eg.cpp</in>
                <in>bron_kerbosch_clique_number.cpp</in>
                <in>bron_kerbosch_print_cliques.cpp</in>
                <in>bucket_sorter.cpp</in>
                <in>canonical_ordering.cpp</in>
                <in>cc-internet.cpp</in>
                <in>city_visitor.cpp</in>
                <in>closeness_centrality.cpp</in>
                <in>clustering_coefficient.cpp</in>
                <in>components_on_edgelist.cpp</in>
                <in>connected-components.cpp</in>
                <in>connected_components.cpp</in>
                <in>container_gen.cpp</in>
                <in>copy-example.cpp</in>
                <in>csr-example.cpp</in>
                <in>cuthill_mckee_ordering.cpp</in>
                <in>cycle-file-dep.cpp</in>
                <in>cycle-file-dep2.cpp</in>
                <in>cycle_canceling_example.cpp</in>
                <in>cycle_ratio_example.cpp</in>
                <in>dag_shortest_paths.cpp</in>
                <in>dave.cpp</in>
                <in>default-constructor.cpp</in>
                <in>default-constructor2.cpp</in>
                <in>degree_centrality.cpp</in>
                <in>dfs-example.cpp</in>
                <in>dfs-parenthesis.cpp</in>
                <in>dfs.cpp</in>
                <in>dfs_parenthesis.cpp</in>
                <in>dijkstra-example-listS.cpp</in>
                <in>dijkstra-example.cpp</in>
                <in>dijkstra-no-color-map-example.cpp</in>
                <in>directed_graph.cpp</in>
                <in>eccentricity.cpp</in>
                <in>edge-connectivity.cpp</in>
                <in>edge-function.cpp</in>
                <in>edge-iter-constructor.cpp</in>
                <in>edge_basics.cpp</in>
                <in>edge_coloring.cpp</in>
                <in>edge_connectivity.cpp</in>
                <in>edge_iterator_constructor.cpp</in>
                <in>edge_property.cpp</in>
                <in>edmonds-karp-eg.cpp</in>
                <in>exterior_properties.cpp</in>
                <in>exterior_property_map.cpp</in>
                <in>family-tree-eg.cpp</in>
                <in>fibonacci_heap.cpp</in>
                <in>file_dependencies.cpp</in>
                <in>filtered-copy-example.cpp</in>
                <in>filtered_graph.cpp</in>
                <in>filtered_graph_edge_range.cpp</in>
                <in>filtered_vec_as_graph.cpp</in>
                <in>fr_layout.cpp</in>
                <in>gerdemann.cpp</in>
                <in>girth.cpp</in>
                <in>graph-assoc-types.cpp</in>
                <in>graph-property-iter-eg.cpp</in>
                <in>graph-thingie.cpp</in>
                <in>graph.cpp</in>
                <in>graph_as_tree.cpp</in>
                <in>graph_property.cpp</in>
                <in>graphviz.cpp</in>
                <in>grid_graph_example.cpp</in>
                <in>grid_graph_properties.cpp</in>
                <in>hawick_circuits.cpp</in>
                <in>helper.hpp</in>
                <in>implicit_graph.cpp</in>
                <in>in_edges.cpp</in>
                <in>inclusive_mean_geodesic.cpp</in>
                <in>incremental-components-eg.cpp</in>
                <in>incremental_components.cpp</in>
                <in>influence_prestige.cpp</in>
                <in>interior_pmap_bundled.cpp</in>
                <in>interior_property_map.cpp</in>
                <in>iohb.c</in>
                <in>iohb.h</in>
                <in>isomorphism.cpp</in>
                <in>iteration_macros.cpp</in>
                <in>iterator-property-map-eg.cpp</in>
                <in>johnson-eg.cpp</in>
                <in>kevin-bacon.cpp</in>
                <in>kevin-bacon2.cpp</in>
                <in>king_ordering.cpp</in>
                <in>knights-tour.cpp</in>
                <in>kruskal-example.cpp</in>
                <in>kruskal-telephone.cpp</in>
                <in>kuratowski_subgraph.cpp</in>
                <in>labeled_graph.cpp</in>
                <in>last-mod-time.cpp</in>
                <in>leda-concept-check.cpp</in>
                <in>leda-graph-eg.cpp</in>
                <in>loops_dfs.cpp</in>
                <in>make_biconnected_planar.cpp</in>
                <in>make_connected.cpp</in>
                <in>make_maximal_planar.cpp</in>
                <in>matching_example.cpp</in>
                <in>max_flow.cpp</in>
                <in>mcgregor_subgraphs_example.cpp</in>
                <in>mean_geodesic.cpp</in>
                <in>miles_span.cpp</in>
                <in>min_max_paths.cpp</in>
                <in>minimum_degree_ordering.cpp</in>
                <in>modify_graph.cpp</in>
                <in>neighbor_bfs.cpp</in>
                <in>ordered_out_edges.cpp</in>
                <in>ospf-example.cpp</in>
                <in>parallel-compile-time.cpp</in>
                <in>planar_face_traversal.cpp</in>
                <in>prim-example.cpp</in>
                <in>prim-telephone.cpp</in>
                <in>print-adjacent-vertices.cpp</in>
                <in>print-edges.cpp</in>
                <in>print-in-edges.cpp</in>
                <in>print-out-edges.cpp</in>
                <in>property-map-traits-eg.cpp</in>
                <in>property_iterator.cpp</in>
                <in>push-relabel-eg.cpp</in>
                <in>put-get-helper-eg.cpp</in>
                <in>quick-tour.cpp</in>
                <in>quick_tour.cpp</in>
                <in>r_c_shortest_paths_example.cpp</in>
                <in>reachable-loop-head.cpp</in>
                <in>reachable-loop-tail.cpp</in>
                <in>read_graphviz.cpp</in>
                <in>read_write_dimacs-eg.cpp</in>
                <in>remove_edge_if_bidir.cpp</in>
                <in>remove_edge_if_dir.cpp</in>
                <in>remove_edge_if_undir.cpp</in>
                <in>reverse-graph-eg.cpp</in>
                <in>roget_components.cpp</in>
                <in>scaled_closeness_centrality.cpp</in>
                <in>scc.cpp</in>
                <in>simple_planarity_test.cpp</in>
                <in>sloan_ordering.cpp</in>
                <in>stoer_wagner.cpp</in>
                <in>straight_line_drawing.cpp</in>
                <in>strong-components.cpp</in>
                <in>strong_components.cpp</in>
                <in>subgraph.cpp</in>
                <in>subgraph_properties.cpp</in>
                <in>successive_shortest_path_nonnegative_weights_example.cpp</in>
                <in>tiernan_girth_circumference.cpp</in>
                <in>tiernan_print_cycles.cpp</in>
                <in>topo-sort-file-dep.cpp</in>
                <in>topo-sort-file-dep2.cpp</in>
                <in>topo-sort-with-leda.cpp</in>
                <in>topo-sort-with-sgb.cpp</in>
                <in>topo-sort1.cpp</in>
                <in>topo-sort2.cpp</in>
                <in>topo_sort.cpp</in>
                <in>transitive_closure.cpp</in>
                <in>transpose-example.cpp</in>
                <in>two_graphs_common_spanning_trees.cpp</in>
                <in>undirected_adjacency_list.cpp</in>
                <in>undirected_dfs.cpp</in>
                <in>undirected_graph.cpp</in>
                <in>vector-as-graph.cpp</in>
                <in>vertex-name-property.cpp</in>
                <in>vertex_basics.cpp</in>
                <in>vf2_sub_graph_iso_example.cpp</in>
                <in>vf2_sub_graph_iso_multi_example.cpp</in>
                <in>visitor.cpp</in>
                <in>write_graphviz.cpp</in>
              </df>
            </df>
            <df name="graph_parallel">
              <df name="doc">
                <df name="html">
                </df>
              </df>
              <df name="example">
                <in>breadth_first_search.cpp</in>
                <in>dijkstra_shortest_paths.cpp</in>
              </df>
            </df>
            <df name="heap">
            </df>
            <df name="icl">
              <df name="doc">
                <df name="html">
                  <df name="boost">
                    <df name="icl">
                      <df name="interval_base_map">
                      </df>
                      <df name="map">
                      </df>
                    </df>
                  </df>
                  <df name="boost_icl">
                    <df name="concepts">
                    </df>
                    <df name="examples">
                    </df>
                    <df name="function_reference">
                    </df>
                    <df name="implementation">
                    </df>
                    <df name="interface">
                    </df>
                    <df name="semantics">
                    </df>
                  </df>
                  <df name="header">
                    <df name="boost">
                      <df name="icl">
                      </df>
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="boost_party_">
                  <in>boost_party.cpp</in>
                </df>
                <df name="custom_interval_">
                  <in>custom_interval.cpp</in>
                </df>
                <df name="dynamic_interval_">
                  <in>dynamic_interval.cpp</in>
                </df>
                <df name="interval_">
                  <in>interval.cpp</in>
                </df>
                <df name="interval_container_">
                  <in>interval_container.cpp</in>
                </df>
                <df name="itvset_shell_">
                  <in>itvset_shell.cpp</in>
                </df>
                <df name="large_bitset_">
                  <in>bits.hpp</in>
                  <in>large_bitset.cpp</in>
                  <in>large_bitset.hpp</in>
                  <in>meta_log.hpp</in>
                </df>
                <df name="man_power_">
                  <in>man_power.cpp</in>
                </df>
                <df name="month_and_week_grid_">
                  <in>month_and_week_grid.cpp</in>
                </df>
                <df name="overlap_counter_">
                  <in>overlap_counter.cpp</in>
                </df>
                <df name="party_">
                  <in>party.cpp</in>
                </df>
                <df name="partys_height_average_">
                  <in>partys_height_average.cpp</in>
                </df>
                <df name="partys_tallest_guests_">
                  <in>partys_tallest_guests.cpp</in>
                </df>
                <df name="splititvmap_shell_">
                  <in>splititvmap_shell.cpp</in>
                </df>
                <df name="static_interval_">
                  <in>static_interval.cpp</in>
                </df>
                <df name="std_copy_">
                  <in>std_copy.cpp</in>
                </df>
                <df name="std_transform_">
                  <in>std_transform.cpp</in>
                </df>
                <df name="user_groups_">
                  <in>user_groups.cpp</in>
                </df>
                <in>toytime.hpp</in>
              </df>
            </df>
            <df name="integer">
              <df name="doc">
                <df name="html">
                  <df name="boost_integer">
                  </df>
                </df>
              </df>
            </df>
            <df name="interprocess">
              <df name="example">
                <in>comp_doc_anonymous_conditionA.cpp</in>
                <in>comp_doc_anonymous_conditionB.cpp</in>
                <in>comp_doc_anonymous_mutexA.cpp</in>
                <in>comp_doc_anonymous_mutexB.cpp</in>
                <in>comp_doc_anonymous_semaphoreA.cpp</in>
                <in>comp_doc_anonymous_semaphoreB.cpp</in>
                <in>comp_doc_anonymous_upgradable_mutexA.cpp</in>
                <in>comp_doc_anonymous_upgradable_mutexB.cpp</in>
                <in>comp_doc_message_queueA.cpp</in>
                <in>comp_doc_message_queueB.cpp</in>
                <in>doc_adaptive_pool.cpp</in>
                <in>doc_allocator.cpp</in>
                <in>doc_anonymous_condition_shared_data.hpp</in>
                <in>doc_anonymous_mutex_shared_data.hpp</in>
                <in>doc_anonymous_semaphore_shared_data.hpp</in>
                <in>doc_anonymous_shared_memory.cpp</in>
                <in>doc_bufferstream.cpp</in>
                <in>doc_cached_adaptive_pool.cpp</in>
                <in>doc_cached_node_allocator.cpp</in>
                <in>doc_complex_map.cpp</in>
                <in>doc_cont.cpp</in>
                <in>doc_file_mapping.cpp</in>
                <in>doc_intrusive.cpp</in>
                <in>doc_ipc_message.cpp</in>
                <in>doc_managed_aligned_allocation.cpp</in>
                <in>doc_managed_allocation_command.cpp</in>
                <in>doc_managed_construction_info.cpp</in>
                <in>doc_managed_copy_on_write.cpp</in>
                <in>doc_managed_external_buffer.cpp</in>
                <in>doc_managed_grow.cpp</in>
                <in>doc_managed_heap_memory.cpp</in>
                <in>doc_managed_mapped_file.cpp</in>
                <in>doc_managed_multiple_allocation.cpp</in>
                <in>doc_managed_raw_allocation.cpp</in>
                <in>doc_map.cpp</in>
                <in>doc_move_containers.cpp</in>
                <in>doc_multi_index.cpp</in>
                <in>doc_named_alloc.cpp</in>
                <in>doc_named_condition_shared_data.hpp</in>
                <in>doc_named_mutex.cpp</in>
                <in>doc_node_allocator.cpp</in>
                <in>doc_offset_ptr.cpp</in>
                <in>doc_private_adaptive_pool.cpp</in>
                <in>doc_private_node_allocator.cpp</in>
                <in>doc_scoped_ptr.cpp</in>
                <in>doc_shared_memory.cpp</in>
                <in>doc_shared_ptr.cpp</in>
                <in>doc_shared_ptr_explicit.cpp</in>
                <in>doc_spawn_vector.cpp</in>
                <in>doc_unique_ptr.cpp</in>
                <in>doc_unordered_map.cpp</in>
                <in>doc_upgradable_mutex_shared_data.hpp</in>
                <in>doc_vectorstream.cpp</in>
                <in>doc_where_allocate.cpp</in>
                <in>doc_windows_shared_memory.cpp</in>
                <in>doc_xsi_shared_memory.cpp</in>
              </df>
            </df>
            <df name="intrusive">
              <df name="example">
                <in>doc_advanced_value_traits.cpp</in>
                <in>doc_any_hook.cpp</in>
                <in>doc_assoc_optimized_code.cpp</in>
                <in>doc_auto_unlink.cpp</in>
                <in>doc_avl_set.cpp</in>
                <in>doc_avltree_algorithms.cpp</in>
                <in>doc_bucket_traits.cpp</in>
                <in>doc_clone_from.cpp</in>
                <in>doc_derivation_value_traits.cpp</in>
                <in>doc_entity.cpp</in>
                <in>doc_erasing_and_disposing.cpp</in>
                <in>doc_function_hooks.cpp</in>
                <in>doc_how_to_use.cpp</in>
                <in>doc_iterator_from_value.cpp</in>
                <in>doc_list.cpp</in>
                <in>doc_list_algorithms.cpp</in>
                <in>doc_map.cpp</in>
                <in>doc_member_value_traits.cpp</in>
                <in>doc_offset_ptr.cpp</in>
                <in>doc_positional_insertion.cpp</in>
                <in>doc_rbtree_algorithms.cpp</in>
                <in>doc_recursive.cpp</in>
                <in>doc_recursive_member.cpp</in>
                <in>doc_set.cpp</in>
                <in>doc_sg_set.cpp</in>
                <in>doc_slist.cpp</in>
                <in>doc_slist_algorithms.cpp</in>
                <in>doc_splay_algorithms.cpp</in>
                <in>doc_splay_set.cpp</in>
                <in>doc_splaytree_algorithms.cpp</in>
                <in>doc_stateful_value_traits.cpp</in>
                <in>doc_treap_algorithms.cpp</in>
                <in>doc_treap_set.cpp</in>
                <in>doc_unordered_set.cpp</in>
                <in>doc_value_traits.cpp</in>
                <in>doc_window.cpp</in>
              </df>
            </df>
            <df name="io">
              <df name="doc">
              </df>
            </df>
            <df name="iostreams">
              <df name="doc">
                <df name="classes">
                </df>
                <df name="concepts">
                </df>
                <df name="functions">
                </df>
                <df name="guide">
                </df>
                <df name="macros">
                </df>
                <df name="theme">
                </df>
                <df name="tree">
                </df>
                <df name="tutorial">
                </df>
              </df>
              <df name="example">
                <in>boost_back_inserter_example.cpp</in>
                <in>container_device.hpp</in>
                <in>container_device_example.cpp</in>
                <in>container_sink_example.cpp</in>
                <in>container_source_example.cpp</in>
                <in>dictionary_filter.hpp</in>
                <in>finite_state_filter.hpp</in>
                <in>iterator_range_example.cpp</in>
                <in>line_wrapping_filter.hpp</in>
                <in>shell_comments_filter.hpp</in>
                <in>std_back_inserter_example.cpp</in>
                <in>tab_expanding_filter.hpp</in>
                <in>unix2dos_filter.hpp</in>
              </df>
            </df>
            <df name="iterator">
              <df name="doc">
              </df>
              <df name="example">
                <in>counting_iterator_example.cpp</in>
                <in>filter_iterator_example.cpp</in>
                <in>func_output_iter_example.cpp</in>
                <in>indirect_iterator_example.cpp</in>
                <in>node.hpp</in>
                <in>node_iterator1.cpp</in>
                <in>node_iterator1.hpp</in>
                <in>node_iterator2.cpp</in>
                <in>node_iterator2.hpp</in>
                <in>node_iterator3.cpp</in>
                <in>node_iterator3.hpp</in>
                <in>permutation_iter_example.cpp</in>
                <in>reverse_iterator.cpp</in>
                <in>reverse_iterator_example.cpp</in>
                <in>transform_iterator_example.cpp</in>
              </df>
            </df>
            <df name="lambda">
              <df name="doc">
              </df>
            </df>
            <df name="lexical_cast">
              <df name="example">
                <in>args_to_numbers.cpp</in>
                <in>generic_stringize.cpp</in>
                <in>small_examples.cpp</in>
                <in>variant_to_long_double.cpp</in>
              </df>
            </df>
            <df name="local_function">
              <df name="doc">
                <df name="html">
                  <df name="boost_localfunction">
                  </df>
                </df>
              </df>
              <df name="example">
                <in>add_cxx11_lambda.cpp</in>
                <in>add_global_functor.cpp</in>
                <in>add_local_functor.cpp</in>
                <in>add_phoenix.cpp</in>
                <in>const_block.cpp</in>
                <in>const_block.hpp</in>
                <in>const_block_error.cpp</in>
                <in>const_block_error_cxx11_lambda.cpp</in>
                <in>expensive_copy_cxx11_lambda.cpp</in>
                <in>expensive_copy_local_function.cpp</in>
                <in>gcc_access.cpp</in>
                <in>gcc_cxx11_lambda.cpp</in>
                <in>gcc_lambda.cpp</in>
                <in>gcc_lambda.hpp</in>
                <in>gcc_square.cpp</in>
                <in>gcc_store.cpp</in>
                <in>impl_pp_keyword.cpp</in>
                <in>impl_tparam_tricks.cpp</in>
                <in>n2529_this.cpp</in>
                <in>n2550_find_if.cpp</in>
                <in>noncopyable_cxx11_lambda_error.cpp</in>
                <in>noncopyable_local_function.cpp</in>
                <in>phoenix_factorial.cpp</in>
                <in>phoenix_factorial_local.cpp</in>
                <in>profile_cxx11_lambda.cpp</in>
                <in>profile_global_functor.cpp</in>
                <in>profile_helpers.hpp</in>
                <in>profile_local_function.cpp</in>
                <in>profile_local_function_inline.cpp</in>
                <in>profile_local_functor.cpp</in>
                <in>profile_phoenix.cpp</in>
                <in>scope_exit.cpp</in>
                <in>scope_exit.hpp</in>
              </df>
            </df>
            <df name="locale">
              <df name="doc">
                <df name="html">
                </df>
                <df name="style">
                </df>
                <df name="templates">
                </df>
              </df>
            </df>
            <df name="lockfree">
            </df>
            <df name="log">
              <df name="doc">
                <df name="html">
                  <df name="boost">
                    <df name="log">
                      <df name="attribute">
                      </df>
                      <df name="attribute_value">
                      </df>
                      <df name="attribute_value_ordering">
                      </df>
                      <df name="attributes">
                        <df name="basic_clock">
                        </df>
                        <df name="constant">
                        </df>
                        <df name="counter">
                        </df>
                        <df name="current_thread_id">
                        </df>
                        <df name="function">
                        </df>
                        <df name="mutable_consta_idp51793648">
                        </df>
                        <df name="mutable_constant">
                        </df>
                        <df name="named_scope">
                        </df>
                        <df name="named_scope_entry">
                        </df>
                      </df>
                      <df name="expressions">
                        <df name="channel_severi_idp52830960">
                        </df>
                        <df name="channel_severi_idp52860240">
                        </df>
                        <df name="pattern_replacer">
                        </df>
                        <df name="tag">
                        </df>
                      </df>
                      <df name="filter">
                      </df>
                      <df name="result_of">
                      </df>
                      <df name="sinks">
                        <df name="asynchronous_sink">
                        </df>
                        <df name="basic_formatti_idp53899600">
                        </df>
                        <df name="event_log">
                        </df>
                        <df name="file">
                        </df>
                        <df name="syslog">
                        </df>
                      </df>
                      <df name="sources">
                        <df name="basic_channel_logger">
                        </df>
                        <df name="channel">
                        </df>
                        <df name="exception_handler">
                        </df>
                        <df name="severity">
                        </df>
                      </df>
                      <df name="trivial">
                      </df>
                      <df name="type_dispatcher">
                      </df>
                    </df>
                  </df>
                  <df name="images">
                    <df name="log">
                    </df>
                  </df>
                  <df name="log">
                    <df name="detailed">
                    </df>
                    <df name="extension">
                    </df>
                    <df name="installation">
                    </df>
                    <df name="rationale">
                    </df>
                    <df name="tutorial">
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="advanced_usage">
                  <in>main.cpp</in>
                </df>
                <df name="async_log">
                  <in>main.cpp</in>
                </df>
                <df name="basic_usage">
                  <in>main.cpp</in>
                </df>
                <df name="bounded_async_log">
                  <in>main.cpp</in>
                </df>
                <df name="doc">
                  <in>attr_value_extraction.cpp</in>
                  <in>attr_value_visitation.cpp</in>
                  <in>core_core_manual.cpp</in>
                  <in>core_record.cpp</in>
                  <in>exception_handling.cpp</in>
                  <in>expressions_attr_fmt_tag.cpp</in>
                  <in>expressions_channel_severity_filter.cpp</in>
                  <in>expressions_has_attr_stat_accum.cpp</in>
                  <in>expressions_keyword_fmt_tag.cpp</in>
                  <in>extension_app_launcher.cpp</in>
                  <in>extension_filter_parser.cpp</in>
                  <in>extension_filter_parser_custom_rel.cpp</in>
                  <in>extension_formatter_parser.cpp</in>
                  <in>extension_record_tagger.cpp</in>
                  <in>extension_stat_collector.cpp</in>
                  <in>extension_stat_collector_settings.cpp</in>
                  <in>extension_system_uptime_attr.cpp</in>
                  <in>sinks_async.cpp</in>
                  <in>sinks_async_bounded.cpp</in>
                  <in>sinks_async_ordering.cpp</in>
                  <in>sinks_debugger.cpp</in>
                  <in>sinks_file.cpp</in>
                  <in>sinks_multifile.cpp</in>
                  <in>sinks_ostream.cpp</in>
                  <in>sinks_simple_event_log.cpp</in>
                  <in>sinks_sync.cpp</in>
                  <in>sinks_syslog.cpp</in>
                  <in>sinks_unlocked.cpp</in>
                  <in>sinks_xml_file.cpp</in>
                  <in>sources_net_connection.cpp</in>
                  <in>sources_net_connection_chan.cpp</in>
                  <in>sources_net_connection_dynamic_chan.cpp</in>
                  <in>sources_severity.cpp</in>
                  <in>sources_severity_channel.cpp</in>
                  <in>tutorial_attributes.cpp</in>
                  <in>tutorial_file.cpp</in>
                  <in>tutorial_file_manual.cpp</in>
                  <in>tutorial_filtering.cpp</in>
                  <in>tutorial_fmt_custom.cpp</in>
                  <in>tutorial_fmt_format.cpp</in>
                  <in>tutorial_fmt_stream.cpp</in>
                  <in>tutorial_fmt_stream_manual.cpp</in>
                  <in>tutorial_fmt_string.cpp</in>
                  <in>tutorial_logging.cpp</in>
                  <in>tutorial_trivial.cpp</in>
                  <in>tutorial_trivial_flt.cpp</in>
                  <in>util_dynamic_type_disp.cpp</in>
                  <in>util_manip_to_log.cpp</in>
                  <in>util_static_type_disp.cpp</in>
                </df>
                <df name="event_log">
                  <in>main.cpp</in>
                </df>
                <df name="keywords">
                  <in>main.cpp</in>
                </df>
                <df name="multiple_files">
                  <in>main.cpp</in>
                </df>
                <df name="multiple_threads">
                  <in>main.cpp</in>
                </df>
                <df name="native_syslog">
                  <in>main.cpp</in>
                </df>
                <df name="rotating_file">
                  <in>main.cpp</in>
                </df>
                <df name="settings_file">
                  <in>main.cpp</in>
                </df>
                <df name="settings_file_formatter_factory">
                  <in>main.cpp</in>
                </df>
                <df name="syslog">
                  <in>main.cpp</in>
                </df>
                <df name="trivial">
                  <in>main.cpp</in>
                </df>
                <df name="wide_char">
                  <in>main.cpp</in>
                </df>
              </df>
            </df>
            <df name="logic">
            </df>
            <df name="math">
              <df name="doc">
                <df name="distexplorer">
                  <df name="html">
                  </df>
                </df>
                <df name="equations">
                </df>
                <df name="graphs">
                </df>
                <df name="html">
                  <df name="indexes">
                  </df>
                  <df name="math_toolkit">
                    <df name="airy">
                    </df>
                    <df name="bessel">
                    </df>
                    <df name="dist_ref">
                      <df name="dists">
                      </df>
                    </df>
                    <df name="ellint">
                    </df>
                    <df name="expint">
                    </df>
                    <df name="factorials">
                    </df>
                    <df name="float128">
                    </df>
                    <df name="fp_facets">
                    </df>
                    <df name="hankel">
                    </df>
                    <df name="high_precision">
                    </df>
                    <df name="internals1">
                    </df>
                    <df name="internals2">
                    </df>
                    <df name="inv_hyper">
                    </df>
                    <df name="jacobi">
                    </df>
                    <df name="next_float">
                    </df>
                    <df name="number_series">
                    </df>
                    <df name="pol_ref">
                    </df>
                    <df name="pol_tutorial">
                    </df>
                    <df name="powers">
                    </df>
                    <df name="rounding">
                    </df>
                    <df name="sf_beta">
                    </df>
                    <df name="sf_erf">
                    </df>
                    <df name="sf_gamma">
                    </df>
                    <df name="sf_poly">
                    </df>
                    <df name="sinc">
                    </df>
                    <df name="special_tut">
                    </df>
                    <df name="stat_tut">
                      <df name="overview">
                      </df>
                      <df name="weg">
                        <df name="binom_eg">
                        </df>
                        <df name="cs_eg">
                        </df>
                        <df name="find_eg">
                        </df>
                        <df name="nccs_eg">
                        </df>
                        <df name="neg_binom_eg">
                        </df>
                        <df name="normal_example">
                        </df>
                        <df name="st_eg">
                        </df>
                      </df>
                    </df>
                    <df name="tutorial">
                    </df>
                    <df name="zetas">
                    </df>
                  </df>
                </df>
                <df name="images">
                </df>
              </df>
              <df name="dot_net_example">
                <df name="distribution_explorer">
                </df>
              </df>
              <df name="example">
                <in>airy_zeros_example.cpp</in>
                <in>arcsine_example.cpp</in>
                <in>bernoulli_example.cpp</in>
                <in>bessel_errors_example.cpp</in>
                <in>bessel_zeros_example.cpp</in>
                <in>bessel_zeros_example_1.cpp</in>
                <in>bessel_zeros_interator_example.cpp</in>
                <in>big_seventh.cpp</in>
                <in>binomial_coinflip_example.cpp</in>
                <in>binomial_confidence_limits.cpp</in>
                <in>binomial_example_nag.cpp</in>
                <in>binomial_quiz_example.cpp</in>
                <in>binomial_sample_sizes.cpp</in>
                <in>c_error_policy_example.cpp</in>
                <in>chi_square_std_dev_test.cpp</in>
                <in>constants_eg1.cpp</in>
                <in>cstdfloat_example.cpp</in>
                <in>distribution_construction.cpp</in>
                <in>error_handling_example.cpp</in>
                <in>error_policies_example.cpp</in>
                <in>error_policy_example.cpp</in>
                <in>f_test.cpp</in>
                <in>factorial_example.cpp</in>
                <in>fft_sines_table.cpp</in>
                <in>find_location_example.cpp</in>
                <in>find_mean_and_sd_normal.cpp</in>
                <in>find_root_example.cpp</in>
                <in>find_scale_example.cpp</in>
                <in>geometric_examples.cpp</in>
                <in>hyperexponential_more_snips.cpp</in>
                <in>hyperexponential_snips.cpp</in>
                <in>inspect_fp.cpp</in>
                <in>inverse_chi_squared_bayes_eg.cpp</in>
                <in>inverse_chi_squared_example.cpp</in>
                <in>inverse_chi_squared_find_df_example.cpp</in>
                <in>inverse_gamma_distribution_example.cpp</in>
                <in>inverse_gamma_example.cpp</in>
                <in>inverse_gaussian_example.cpp</in>
                <in>laplace_example.cpp</in>
                <in>lexical_cast_native.cpp</in>
                <in>lexical_cast_nonfinite_facets.cpp</in>
                <in>nc_chi_sq_example.cpp</in>
                <in>neg_binom_confidence_limits.cpp</in>
                <in>neg_binomial_sample_sizes.cpp</in>
                <in>negative_binomial_example1.cpp</in>
                <in>negative_binomial_example2.cpp</in>
                <in>neumann_zeros_example_1.cpp</in>
                <in>nonfinite_facet_simple.cpp</in>
                <in>nonfinite_facet_sstream.cpp</in>
                <in>nonfinite_legacy.cpp</in>
                <in>nonfinite_loopback_ok.cpp</in>
                <in>nonfinite_num_facet.cpp</in>
                <in>nonfinite_num_facet_serialization.cpp</in>
                <in>nonfinite_num_facet_trap.cpp</in>
                <in>nonfinite_serialization_archives.cpp</in>
                <in>nonfinite_signaling_NaN.cpp</in>
                <in>normal_misc_examples.cpp</in>
                <in>normal_tables.cpp</in>
                <in>numerical_derivative_example.cpp</in>
                <in>owens_t_example.cpp</in>
                <in>policy_eg_1.cpp</in>
                <in>policy_eg_10.cpp</in>
                <in>policy_eg_2.cpp</in>
                <in>policy_eg_3.cpp</in>
                <in>policy_eg_4.cpp</in>
                <in>policy_eg_5.cpp</in>
                <in>policy_eg_6.cpp</in>
                <in>policy_eg_7.cpp</in>
                <in>policy_eg_8.cpp</in>
                <in>policy_eg_9.cpp</in>
                <in>policy_ref_snip1.cpp</in>
                <in>policy_ref_snip10.cpp</in>
                <in>policy_ref_snip11.cpp</in>
                <in>policy_ref_snip12.cpp</in>
                <in>policy_ref_snip13.cpp</in>
                <in>policy_ref_snip2.cpp</in>
                <in>policy_ref_snip3.cpp</in>
                <in>policy_ref_snip4.cpp</in>
                <in>policy_ref_snip5.cpp</in>
                <in>policy_ref_snip6.cpp</in>
                <in>policy_ref_snip7.cpp</in>
                <in>policy_ref_snip8.cpp</in>
                <in>policy_ref_snip9.cpp</in>
                <in>root_finding_example.cpp</in>
                <in>sines.hpp</in>
                <in>skew_normal_example.cpp</in>
                <in>special_data.cpp</in>
                <in>students_t_example1.cpp</in>
                <in>students_t_example2.cpp</in>
                <in>students_t_example3.cpp</in>
                <in>students_t_single_sample.cpp</in>
                <in>students_t_two_samples.cpp</in>
                <in>test_cpp_float_close_fraction.cpp</in>
                <in>test_nonfinite_loopback.cpp</in>
              </df>
              <df name="special_functions">
                <df name="graphics">
                </df>
              </df>
            </df>
            <df name="move">
              <df name="example">
                <in>copymovable.hpp</in>
                <in>doc_clone_ptr.cpp</in>
                <in>doc_construct_forward.cpp</in>
                <in>doc_file_descriptor.cpp</in>
                <in>doc_how_works.cpp</in>
                <in>doc_move_algorithms.cpp</in>
                <in>doc_move_inserter.cpp</in>
                <in>doc_move_iterator.cpp</in>
                <in>doc_move_return.cpp</in>
                <in>movable.hpp</in>
              </df>
            </df>
            <df name="mpi">
              <df name="doc">
              </df>
              <df name="example">
                <df name="python">
                </df>
                <in>generate_collect.cpp</in>
                <in>generate_collect_optional.cpp</in>
                <in>global_min.cpp</in>
                <in>hello_world.cpp</in>
                <in>hello_world_broadcast.cpp</in>
                <in>hello_world_groups.cpp</in>
                <in>hello_world_nonblocking.cpp</in>
                <in>in_place_global_min.cpp</in>
                <in>parallel_example.cpp</in>
                <in>random_content.cpp</in>
                <in>random_gather.cpp</in>
                <in>random_min.cpp</in>
                <in>reduce_performance_test.cpp</in>
                <in>string_cat.cpp</in>
              </df>
            </df>
            <df name="mpl">
              <df name="doc">
                <df name="refmanual">
                </df>
                <df name="src">
                  <df name="docutils">
                    <df name="writers">
                      <df name="html4_refdoc">
                      </df>
                    </df>
                  </df>
                </df>
                <df name="tutorial">
                </df>
              </df>
              <df name="example">
                <df name="fsm">
                  <df name="aux_">
                    <in>STT_impl_gen.hpp</in>
                    <in>base_event.hpp</in>
                    <in>event.hpp</in>
                    <in>state.hpp</in>
                    <in>transition.hpp</in>
                  </df>
                  <in>player.cpp</in>
                  <in>player1.cpp</in>
                  <in>player2.cpp</in>
                  <in>state_machine.hpp</in>
                </df>
                <in>inherit_linearly.cpp</in>
                <in>inherit_multiply.cpp</in>
                <in>integer.cpp</in>
                <in>tuple_from_list.cpp</in>
              </df>
            </df>
            <df name="msm">
              <df name="doc">
                <df name="HTML">
                </df>
              </df>
              <df name="example">
                <df name="mpl_graph">
                  <in>adjacency_list_graph.cpp</in>
                  <in>breadth_first_search.cpp</in>
                  <in>depth_first_search.cpp</in>
                  <in>incidence_list_graph.cpp</in>
                  <in>msm_adaptor.cpp</in>
                </df>
              </df>
            </df>
            <df name="multi_array">
              <df name="doc">
              </df>
              <df name="example">
                <in>basic1.cpp</in>
                <in>basic2.cpp</in>
                <in>for_each.hpp</in>
                <in>foreach_test.cpp</in>
                <in>foreach_test2.cpp</in>
                <in>op_paren.cpp</in>
                <in>print_array.cpp</in>
                <in>resize_from_other.cpp</in>
                <in>subview.cpp</in>
                <in>subview2.cpp</in>
              </df>
            </df>
            <df name="multi_index">
              <df name="doc">
                <df name="reference">
                </df>
                <df name="tutorial">
                </df>
              </df>
              <df name="example">
                <in>basic.cpp</in>
                <in>bimap.cpp</in>
                <in>complex_structs.cpp</in>
                <in>composite_keys.cpp</in>
                <in>fun_key.cpp</in>
                <in>hashed.cpp</in>
                <in>ip_allocator.cpp</in>
                <in>non_default_ctor.cpp</in>
                <in>random_access.cpp</in>
                <in>rearrange.cpp</in>
                <in>sequenced.cpp</in>
                <in>serialization.cpp</in>
              </df>
            </df>
            <df name="multiprecision">
              <df name="doc">
                <df name="html">
                  <df name="boost_multiprecision">
                    <df name="indexes">
                    </df>
                    <df name="map">
                    </df>
                    <df name="perf">
                    </df>
                    <df name="ref">
                    </df>
                    <df name="tut">
                      <df name="floats">
                        <df name="fp_eg">
                        </df>
                      </df>
                      <df name="interval">
                      </df>
                      <df name="ints">
                        <df name="egs">
                        </df>
                      </df>
                      <df name="limits">
                      </df>
                      <df name="misc">
                      </df>
                      <df name="rational">
                      </df>
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <in>cpp_bin_float_snips.cpp</in>
                <in>cpp_dec_float_snips.cpp</in>
                <in>cpp_int_snips.cpp</in>
                <in>debug_adaptor_snips.cpp</in>
                <in>float128_snips.cpp</in>
                <in>floating_point_examples.cpp</in>
                <in>gauss_laguerre_quadrature.cpp</in>
                <in>gmp_snips.cpp</in>
                <in>hypergeometric_luke_algorithms.cpp</in>
                <in>integer_examples.cpp</in>
                <in>logged_adaptor.cpp</in>
                <in>mixed_integer_arithmetic.cpp</in>
                <in>mpfi_snips.cpp</in>
                <in>mpfr_snips.cpp</in>
                <in>numeric_limits_snips.cpp</in>
                <in>random_snips.cpp</in>
                <in>safe_prime.cpp</in>
                <in>tommath_snips.cpp</in>
              </df>
            </df>
            <df name="numeric">
              <df name="conversion">
                <df name="doc">
                  <df name="html">
                    <df name="boost_numericconversion">
                    </df>
                    <df name="images">
                      <df name="callouts">
                      </df>
                    </df>
                    <df name="numeric_conversion">
                    </df>
                  </df>
                </df>
              </df>
              <df name="interval">
                <df name="doc">
                </df>
              </df>
              <df name="odeint">
                <df name="doc">
                  <df name="html">
                    <df name="boost">
                      <df name="numeric">
                        <df name="odeint">
                        </df>
                      </df>
                    </df>
                    <df name="boost_numeric_odeint">
                      <df name="concepts">
                      </df>
                      <df name="getting_started">
                      </df>
                      <df name="odeint_in_detail">
                      </df>
                      <df name="tutorial">
                      </df>
                    </df>
                    <df name="header">
                      <df name="boost">
                        <df name="numeric">
                          <df name="odeint">
                            <df name="integrate">
                            </df>
                            <df name="iterator">
                            </df>
                            <df name="stepper">
                            </df>
                          </df>
                        </df>
                      </df>
                    </df>
                    <df name="images">
                      <df name="callouts">
                      </df>
                    </df>
                    <df name="odeint">
                      <df name="indexes">
                      </df>
                    </df>
                  </df>
                </df>
              </df>
              <df name="ublas">
                <df name="doc">
                </df>
              </df>
            </df>
            <df name="optional">
              <df name="doc">
                <df name="html">
                  <df name="boost_optional">
                    <df name="dependencies_and_portability">
                    </df>
                    <df name="quick_start">
                    </df>
                    <df name="reference">
                      <df name="header__boost_optional_bad_optional_access_hpp_">
                      </df>
                      <df name="header__boost_optional_optional_hpp_">
                      </df>
                      <df name="io_header">
                      </df>
                    </df>
                    <df name="tutorial">
                      <df name="design_overview">
                      </df>
                    </df>
                  </df>
                  <df name="images">
                    <df name="callouts">
                    </df>
                  </df>
                  <df name="optional">
                    <df name="reference">
                    </df>
                  </df>
                </df>
                <df name="images">
                </df>
              </df>
            </df>
            <df name="parameter">
              <df name="doc">
                <df name="html">
                </df>
              </df>
            </df>
            <df name="phoenix">
              <df name="doc">
                <df name="html">
                  <df name="images">
                  </df>
                  <df name="phoenix">
                    <df name="examples">
                    </df>
                    <df name="inside">
                      <df name="expression">
                      </df>
                    </df>
                    <df name="lazy_list">
                      <df name="tutorial_with_examples">
                      </df>
                    </df>
                    <df name="maintenance">
                      <df name="experience">
                      </df>
                    </df>
                    <df name="modules">
                      <df name="bind">
                      </df>
                      <df name="core">
                      </df>
                      <df name="function">
                      </df>
                      <df name="object">
                      </df>
                      <df name="scope">
                      </df>
                      <df name="statement">
                      </df>
                      <df name="stl">
                      </df>
                    </df>
                    <df name="starter_kit">
                    </df>
                    <df name="what_s_new">
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <in>adapted_echo_server.cpp</in>
                <in>all_odds.cpp</in>
                <in>arguments.cpp</in>
                <in>bind_goose.cpp</in>
                <in>callback.cpp</in>
                <in>container_actor.cpp</in>
                <in>define_expression.cpp</in>
                <in>factorial.cpp</in>
                <in>find_if.cpp</in>
                <in>function.cpp</in>
                <in>generator.cpp</in>
                <in>generator2.cpp</in>
                <in>identity_transform.cpp</in>
                <in>if.cpp</in>
                <in>invert.cpp</in>
                <in>lambda.cpp</in>
                <in>parallel_for.cpp</in>
                <in>references.cpp</in>
                <in>values.cpp</in>
              </df>
            </df>
            <df name="polygon">
              <df name="benchmark">
                <df name="benchmark_results">
                  <df name="plots">
                  </df>
                </df>
              </df>
              <df name="doc">
                <df name="images">
                </df>
              </df>
              <df name="example">
                <df name="input_data">
                  <df name="polygon">
                  </df>
                  <df name="primary">
                  </df>
                  <df name="random">
                  </df>
                </df>
                <df name="output_data">
                  <df name="polygon">
                  </df>
                  <df name="primary">
                  </df>
                  <df name="random">
                  </df>
                </df>
                <in>gtl_custom_point.cpp</in>
                <in>gtl_custom_polygon.cpp</in>
                <in>gtl_custom_polygon_set.cpp</in>
                <in>voronoi_advanced_tutorial.cpp</in>
                <in>voronoi_basic_tutorial.cpp</in>
                <in>voronoi_visual_utils.hpp</in>
                <in>voronoi_visualizer.cpp</in>
              </df>
            </df>
            <df name="pool">
              <df name="doc">
                <df name="html">
                  <df name="boost">
                    <df name="fast_pool_allocator">
                    </df>
                    <df name="fast_pool_allocator_void__UserAllocat_id378528">
                    </df>
                    <df name="pool_allocator">
                    </df>
                    <df name="pool_allocator_void__UserAllocator__M_id378014">
                    </df>
                    <df name="singleton_pool">
                    </df>
                  </df>
                  <df name="boost_pool">
                    <df name="appendices">
                    </df>
                    <df name="indexes">
                    </df>
                    <df name="pool">
                    </df>
                  </df>
                  <df name="header">
                    <df name="boost">
                      <df name="pool">
                      </df>
                    </df>
                  </df>
                </df>
                <df name="images">
                </df>
              </df>
              <df name="example">
                <in>sys_allocator.hpp</in>
                <in>time_pool_alloc.cpp</in>
              </df>
            </df>
            <df name="predef">
              <df name="doc">
                <df name="html">
                  <df name="images">
                    <df name="callouts">
                    </df>
                  </df>
                  <df name="predef">
                    <df name="reference">
                    </df>
                  </df>
                </df>
              </df>
            </df>
            <df name="preprocessor">
              <df name="doc">
                <df name="data">
                </df>
                <df name="headers">
                  <df name="arithmetic">
                  </df>
                  <df name="array">
                  </df>
                  <df name="comparison">
                  </df>
                  <df name="config">
                  </df>
                  <df name="control">
                  </df>
                  <df name="debug">
                  </df>
                  <df name="facilities">
                  </df>
                  <df name="iteration">
                  </df>
                  <df name="list">
                  </df>
                  <df name="logical">
                  </df>
                  <df name="punctuation">
                  </df>
                  <df name="repetition">
                  </df>
                  <df name="selection">
                  </df>
                  <df name="seq">
                  </df>
                  <df name="slot">
                  </df>
                  <df name="tuple">
                  </df>
                  <df name="variadic">
                  </df>
                </df>
                <df name="ref">
                </df>
                <df name="terms">
                </df>
                <df name="topics">
                </df>
              </df>
            </df>
            <df name="program_options">
              <df name="doc">
              </df>
              <df name="example">
                <in>custom_syntax.cpp</in>
                <in>first.cpp</in>
                <in>multiple_sources.cpp</in>
                <in>option_groups.cpp</in>
                <in>options_description.cpp</in>
                <in>real.cpp</in>
                <in>regex.cpp</in>
                <in>response_file.cpp</in>
              </df>
            </df>
            <df name="property_map">
              <df name="doc">
              </df>
              <df name="example">
                <in>compose_property_map_example.cpp</in>
                <in>example1.cpp</in>
                <in>example2.cpp</in>
                <in>example3.cpp</in>
              </df>
            </df>
            <df name="property_tree">
              <df name="doc">
                <df name="images">
                </df>
              </df>
            </df>
            <df name="proto">
              <df name="example">
                <in>calc1.cpp</in>
                <in>calc2.cpp</in>
                <in>calc3.cpp</in>
                <in>external_transforms.cpp</in>
                <in>futures.cpp</in>
                <in>hello.cpp</in>
                <in>lambda.hpp</in>
                <in>lazy_vector.cpp</in>
                <in>map_assign.cpp</in>
                <in>mini_lambda.cpp</in>
                <in>mixed.cpp</in>
                <in>rgb.cpp</in>
                <in>tarray.cpp</in>
                <in>vec3.cpp</in>
                <in>vector.cpp</in>
                <in>virtual_member.cpp</in>
              </df>
            </df>
            <df name="ptr_container">
              <df name="doc">
              </df>
            </df>
            <df name="python">
              <df name="doc">
                <df name="PyConDC_2003">
                </df>
                <df name="tutorial">
                  <df name="doc">
                    <df name="html">
                      <df name="images">
                      </df>
                      <df name="python">
                      </df>
                    </df>
                  </df>
                </df>
                <df name="v2">
                </df>
              </df>
              <df name="example">
                <df name="quickstart">
                  <in>embedding.cpp</in>
                  <in>extending.cpp</in>
                </df>
                <df name="tutorial">
                  <in>hello.cpp</in>
                </df>
                <in>getting_started1.cpp</in>
                <in>getting_started2.cpp</in>
                <in>std_pair.cpp</in>
              </df>
              <df name="pyste">
                <df name="doc">
                  <df name="theme">
                  </df>
                </df>
              </df>
            </df>
            <df name="random">
              <df name="example">
                <in>die.cpp</in>
                <in>password.cpp</in>
                <in>random_demo.cpp</in>
                <in>weighted_die.cpp</in>
              </df>
            </df>
            <df name="range">
              <df name="doc">
                <df name="html">
                  <df name="range">
                    <df name="concepts">
                    </df>
                    <df name="headers">
                    </df>
                    <df name="mfc_atl">
                    </df>
                    <df name="reference">
                      <df name="adaptors">
                        <df name="reference">
                        </df>
                      </df>
                      <df name="algorithms">
                        <df name="heap">
                        </df>
                        <df name="mutating">
                        </df>
                        <df name="new">
                        </df>
                        <df name="non_mutating">
                        </df>
                        <df name="numeric">
                        </df>
                        <df name="permutation">
                        </df>
                        <df name="set">
                        </df>
                      </df>
                      <df name="concept_implementation">
                        <df name="semantics">
                        </df>
                      </df>
                      <df name="extending">
                        <df name="method_3">
                        </df>
                      </df>
                      <df name="ranges">
                      </df>
                      <df name="utilities">
                      </df>
                    </df>
                    <df name="upgrade">
                    </df>
                  </df>
                </df>
              </df>
            </df>
            <df name="ratio">
              <df name="example">
                <df name="type_traits">
                  <df name="detail">
                    <in>common_type.hpp</in>
                  </df>
                  <in>add_rvalue_reference.hpp</in>
                  <in>common_type.hpp</in>
                  <in>declval.hpp</in>
                </df>
                <in>config.hpp</in>
                <in>display_ex.cpp</in>
                <in>duration.hpp</in>
                <in>si_physics.cpp</in>
                <in>static_assert.hpp</in>
              </df>
            </df>
            <df name="rational">
            </df>
            <df name="regex">
              <df name="doc">
                <df name="html">
                  <df name="boost_regex">
                    <df name="background_information">
                    </df>
                    <df name="configuration">
                    </df>
                    <df name="format">
                    </df>
                    <df name="ref">
                      <df name="concepts">
                      </df>
                      <df name="deprecated_interfaces">
                      </df>
                      <df name="internal_details">
                      </df>
                      <df name="non_std_strings">
                        <df name="icu">
                        </df>
                        <df name="mfc_strings">
                        </df>
                      </df>
                      <df name="syntax_option_type">
                      </df>
                    </df>
                    <df name="syntax">
                      <df name="character_classes">
                      </df>
                      <df name="collating_names">
                      </df>
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="grep">
                  <in>grep.cpp</in>
                </df>
                <df name="snippets">
                  <in>captures_example.cpp</in>
                  <in>credit_card_example.cpp</in>
                  <in>icu_example.cpp</in>
                  <in>mfc_example.cpp</in>
                  <in>partial_regex_grep.cpp</in>
                  <in>partial_regex_iterate.cpp</in>
                  <in>partial_regex_match.cpp</in>
                  <in>regex_grep_example_1.cpp</in>
                  <in>regex_grep_example_2.cpp</in>
                  <in>regex_grep_example_3.cpp</in>
                  <in>regex_grep_example_4.cpp</in>
                  <in>regex_iterator_example.cpp</in>
                  <in>regex_match_example.cpp</in>
                  <in>regex_merge_example.cpp</in>
                  <in>regex_replace_example.cpp</in>
                  <in>regex_search_example.cpp</in>
                  <in>regex_split_example_1.cpp</in>
                  <in>regex_split_example_2.cpp</in>
                  <in>regex_token_iterator_eg_1.cpp</in>
                  <in>regex_token_iterator_eg_2.cpp</in>
                </df>
                <df name="timer">
                  <in>regex_timer.cpp</in>
                </df>
              </df>
              <df name="performance">
              </df>
            </df>
            <df name="scope_exit">
              <df name="doc">
                <df name="html">
                  <df name="scope_exit">
                  </df>
                </df>
              </df>
              <df name="example">
                <in>nova.hpp</in>
                <in>scope_guard.cpp</in>
                <in>scope_guard_seq.cpp</in>
                <in>scope_guard_seq_nova.cpp</in>
                <in>try_catch.cpp</in>
                <in>try_catch_seq.cpp</in>
                <in>try_catch_seq_nova.cpp</in>
                <in>world_cxx11_lambda.cpp</in>
              </df>
            </df>
            <df name="serialization">
              <df name="doc">
              </df>
              <df name="example">
                <in>demo.cpp</in>
                <in>demo_auto_ptr.cpp</in>
                <in>demo_dll.cpp</in>
                <in>demo_dll_a.hpp</in>
                <in>demo_dll_b.hpp</in>
                <in>demo_exception.cpp</in>
                <in>demo_fast_archive.cpp</in>
                <in>demo_gps.hpp</in>
                <in>demo_log.cpp</in>
                <in>demo_pimpl.cpp</in>
                <in>demo_pimpl_A.cpp</in>
                <in>demo_pimpl_A.hpp</in>
                <in>demo_polymorphic.cpp</in>
                <in>demo_polymorphic_A.cpp</in>
                <in>demo_polymorphic_A.hpp</in>
                <in>demo_portable_archive.cpp</in>
                <in>demo_shared_ptr.cpp</in>
                <in>demo_simple_log.cpp</in>
                <in>demo_trivial_archive.cpp</in>
                <in>demo_xml.cpp</in>
                <in>demo_xml.hpp</in>
                <in>demo_xml_load.cpp</in>
                <in>demo_xml_save.cpp</in>
                <in>fix_six.cpp</in>
                <in>log_archive.cpp</in>
                <in>log_archive.hpp</in>
                <in>polymorphic_portable_binary_iarchive.cpp</in>
                <in>polymorphic_portable_binary_iarchive.hpp</in>
                <in>polymorphic_portable_binary_oarchive.cpp</in>
                <in>polymorphic_portable_binary_oarchive.hpp</in>
                <in>portable_binary_archive.hpp</in>
                <in>portable_binary_iarchive.cpp</in>
                <in>portable_binary_iarchive.hpp</in>
                <in>portable_binary_oarchive.cpp</in>
                <in>portable_binary_oarchive.hpp</in>
                <in>simple_log_archive.hpp</in>
              </df>
            </df>
            <df name="signals">
              <df name="doc">
              </df>
              <df name="example">
                <in>button_click.cpp</in>
                <in>difference_connection.cpp</in>
                <in>disconnect_all.cpp</in>
                <in>doc_view.cpp</in>
                <in>first_positive.cpp</in>
                <in>maximum.cpp</in>
                <in>no_function.cpp</in>
                <in>print_sum_product.cpp</in>
                <in>quotient_controlling.cpp</in>
                <in>quotient_named.cpp</in>
              </df>
            </df>
            <df name="signals2">
              <df name="example">
                <in>custom_combiners.cpp</in>
                <in>disconnect_and_block.cpp</in>
                <in>doc_view.cpp</in>
                <in>doc_view_acm.cpp</in>
                <in>doc_view_acm_deconstruct.cpp</in>
                <in>extended_slot.cpp</in>
                <in>hello_world_multi_slot.cpp</in>
                <in>hello_world_slot.cpp</in>
                <in>ordering_slots.cpp</in>
                <in>passing_slots.cpp</in>
                <in>postconstructor_ex1.cpp</in>
                <in>postconstructor_ex2.cpp</in>
                <in>predestructor_example.cpp</in>
                <in>signal_return_value.cpp</in>
                <in>slot_arguments.cpp</in>
              </df>
            </df>
            <df name="smart_ptr">
              <df name="example">
                <in>scoped_ptr_example.cpp</in>
                <in>scoped_ptr_example.hpp</in>
                <in>scoped_ptr_example_test.cpp</in>
                <in>shared_ptr_example.cpp</in>
                <in>shared_ptr_example2.cpp</in>
                <in>shared_ptr_example2.hpp</in>
                <in>shared_ptr_example2_test.cpp</in>
              </df>
            </df>
            <df name="sort">
              <df name="doc">
                <df name="doxygen">
                  <df name="html">
                    <df name="search">
                    </df>
                  </df>
                </df>
                <df name="equation">
                </df>
                <df name="graph">
                  <df name="osx_float_sort_files">
                  </df>
                  <df name="osx_integer_sort_files">
                  </df>
                  <df name="osx_string_sort_files">
                  </df>
                  <df name="windows_float_sort_files">
                  </df>
                  <df name="windows_integer_sort_files">
                  </df>
                  <df name="windows_string_sort_files">
                  </df>
                </df>
                <df name="html">
                  <df name="boost">
                    <df name="sort">
                      <df name="spreadsort">
                      </df>
                    </df>
                  </df>
                  <df name="header">
                    <df name="boost">
                      <df name="sort">
                        <df name="spreadsort">
                        </df>
                      </df>
                    </df>
                  </df>
                  <df name="index">
                  </df>
                  <df name="sort">
                    <df name="sort_hpp">
                      <df name="rationale">
                      </df>
                    </df>
                  </df>
                </df>
                <df name="images">
                </df>
              </df>
              <df name="example">
                <in>alrbreaker.cpp</in>
                <in>alreadysorted.cpp</in>
                <in>binaryalrbreaker.cpp</in>
                <in>boostrandomgen.cpp</in>
                <in>caseinsensitive.cpp</in>
                <in>charstringsample.cpp</in>
                <in>double.cpp</in>
                <in>floatfunctorsample.cpp</in>
                <in>floatsample.cpp</in>
                <in>generalizedstruct.cpp</in>
                <in>int64.cpp</in>
                <in>keyplusdatasample.cpp</in>
                <in>mostlysorted.cpp</in>
                <in>parallelint.cpp</in>
                <in>parallelstring.cpp</in>
                <in>randomgen.cpp</in>
                <in>reverseintsample.cpp</in>
                <in>reversestringfunctorsample.cpp</in>
                <in>reversestringsample.cpp</in>
                <in>rightshiftsample.cpp</in>
                <in>sample.cpp</in>
                <in>shiftfloatsample.cpp</in>
                <in>stringfunctorsample.cpp</in>
                <in>stringsample.cpp</in>
                <in>wstringsample.cpp</in>
              </df>
            </df>
            <df name="spirit">
              <df name="classic">
                <df name="doc">
                  <df name="theme">
                  </df>
                </df>
                <df name="example">
                  <df name="fundamental">
                    <df name="distinct">
                      <in>distinct_parser.cpp</in>
                      <in>distinct_parser_dynamic.cpp</in>
                    </df>
                    <df name="more_calculators">
                      <in>ast_calc2.cpp</in>
                      <in>calc_with_variables.cpp</in>
                      <in>phoenix_subrule_calc.cpp</in>
                      <in>primitive_calc.cpp</in>
                      <in>rpn_calc.cpp</in>
                      <in>vmachine_calc.cpp</in>
                    </df>
                    <df name="position_iterator">
                      <in>position_iterator.cpp</in>
                    </df>
                    <in>ast_calc.cpp</in>
                    <in>bind.cpp</in>
                    <in>boiler_plate.cpp</in>
                    <in>calc_debug.cpp</in>
                    <in>calc_plain.cpp</in>
                    <in>comments.cpp</in>
                    <in>complex_number.cpp</in>
                    <in>error_handling.cpp</in>
                    <in>error_reporting.cpp</in>
                    <in>file_parser.cpp</in>
                    <in>full_calc.cpp</in>
                    <in>functor_parser.cpp</in>
                    <in>list_parser.cpp</in>
                    <in>matching_tags.cpp</in>
                    <in>no_actions.cpp</in>
                    <in>number_list.cpp</in>
                    <in>parse_tree_calc1.cpp</in>
                    <in>parser_context.cpp</in>
                    <in>phoenix_calc.cpp</in>
                    <in>refactoring.cpp</in>
                    <in>regular_expression.cpp</in>
                    <in>roman_numerals.cpp</in>
                    <in>stuff_vector.cpp</in>
                    <in>stuff_vector2.cpp</in>
                    <in>subrule_calc.cpp</in>
                    <in>sum.cpp</in>
                    <in>thousand_separated.cpp</in>
                    <in>tree_calc_grammar.hpp</in>
                  </df>
                  <df name="intermediate">
                    <df name="simple_xml">
                      <in>actions.hpp</in>
                      <in>driver.cpp</in>
                      <in>tag.cpp</in>
                      <in>tag.hpp</in>
                      <in>xml_g.hpp</in>
                    </df>
                    <in>ipv4.cpp</in>
                    <in>ipv4_opt.cpp</in>
                    <in>lazy_parser.cpp</in>
                    <in>parameters.cpp</in>
                    <in>regex_convert.cpp</in>
                  </df>
                  <df name="techniques">
                    <df name="no_rules">
                      <in>no_rule1.cpp</in>
                      <in>no_rule2.cpp</in>
                      <in>no_rule3.cpp</in>
                    </df>
                    <df name="no_rules_with_typeof">
                      <in>opaque_rule_parser.cpp</in>
                      <in>rule_parser_1_1.cpp</in>
                      <in>rule_parser_1_2.cpp</in>
                      <in>rule_parser_2_1.cpp</in>
                      <in>rule_parser_2_2.cpp</in>
                    </df>
                    <in>dynamic_rule.cpp</in>
                    <in>epsilon.cpp</in>
                    <in>multiple_scanners.cpp</in>
                    <in>nabialek.cpp</in>
                    <in>right_recursion.cpp</in>
                    <in>typeof.cpp</in>
                  </df>
                </df>
                <df name="phoenix">
                  <df name="doc">
                    <df name="theme">
                    </df>
                  </df>
                  <df name="example">
                    <df name="fundamental">
                      <in>closures.cpp</in>
                      <in>sample10.cpp</in>
                      <in>sample2.cpp</in>
                      <in>sample3.cpp</in>
                      <in>sample4.cpp</in>
                      <in>sample5.cpp</in>
                      <in>sample6.cpp</in>
                      <in>sample7.cpp</in>
                      <in>sample8.cpp</in>
                      <in>sample9.cpp</in>
                    </df>
                  </df>
                </df>
              </df>
              <df name="doc">
                <df name="html">
                  <df name="images">
                    <df name="callouts">
                    </df>
                  </df>
                  <df name="spirit">
                    <df name="abstracts">
                      <df name="attributes">
                      </df>
                    </df>
                    <df name="advanced">
                      <df name="customize">
                        <df name="assign_to">
                        </df>
                        <df name="auto">
                        </df>
                        <df name="iterate">
                        </df>
                        <df name="store_value">
                        </df>
                        <df name="string_traits">
                        </df>
                      </df>
                      <df name="indepth">
                      </df>
                    </df>
                    <df name="karma">
                      <df name="performance_measurements">
                        <df name="numeric_performance">
                        </df>
                      </df>
                      <df name="quick_reference">
                        <df name="primitive_generators">
                        </df>
                      </df>
                      <df name="reference">
                        <df name="auxiliary">
                        </df>
                        <df name="binary">
                        </df>
                        <df name="char">
                        </df>
                        <df name="directive">
                        </df>
                        <df name="generate_api">
                        </df>
                        <df name="generator_concepts">
                        </df>
                        <df name="nonterminal">
                        </df>
                        <df name="numeric">
                        </df>
                        <df name="operator">
                        </df>
                        <df name="stream">
                        </df>
                        <df name="string">
                        </df>
                      </df>
                      <df name="tutorials">
                      </df>
                    </df>
                    <df name="lex">
                      <df name="abstracts">
                        <df name="lexer_primitives">
                        </df>
                      </df>
                      <df name="quick_reference">
                      </df>
                      <df name="reference">
                        <df name="lexer_concepts">
                        </df>
                        <df name="primitives">
                        </df>
                      </df>
                      <df name="tutorials">
                      </df>
                    </df>
                    <df name="notes">
                    </df>
                    <df name="qi">
                      <df name="quick_reference">
                        <df name="qi_parsers">
                        </df>
                      </df>
                      <df name="reference">
                        <df name="auxiliary">
                        </df>
                        <df name="binary">
                        </df>
                        <df name="char">
                        </df>
                        <df name="directive">
                        </df>
                        <df name="nonterminal">
                        </df>
                        <df name="numeric">
                        </df>
                        <df name="operator">
                        </df>
                        <df name="parse_api">
                        </df>
                        <df name="parser_concepts">
                        </df>
                        <df name="stream">
                        </df>
                        <df name="string">
                        </df>
                      </df>
                      <df name="tutorials">
                      </df>
                    </df>
                    <df name="structure">
                    </df>
                    <df name="support">
                    </df>
                    <df name="what_s_new">
                    </df>
                  </df>
                </df>
                <df name="x3">
                  <df name="html">
                    <df name="images">
                    </df>
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="karma">
                  <in>actions.cpp</in>
                  <in>auto_facilities.cpp</in>
                  <in>basic_facilities.cpp</in>
                  <in>calc2_ast.hpp</in>
                  <in>calc2_ast_dump.cpp</in>
                  <in>calc2_ast_rpn.cpp</in>
                  <in>calc2_ast_vm.cpp</in>
                  <in>calc2_ast_vm.hpp</in>
                  <in>classify_char.cpp</in>
                  <in>complex_number.cpp</in>
                  <in>complex_number_adapt.cpp</in>
                  <in>complex_number_easier.cpp</in>
                  <in>customize_counter.cpp</in>
                  <in>customize_embedded_container.cpp</in>
                  <in>customize_use_as_container.cpp</in>
                  <in>escaped_string.cpp</in>
                  <in>generate_code.cpp</in>
                  <in>key_value_sequence.cpp</in>
                  <in>mini_xml_karma.cpp</in>
                  <in>num_list1.cpp</in>
                  <in>num_list2.cpp</in>
                  <in>num_list3.cpp</in>
                  <in>num_matrix.cpp</in>
                  <in>printf_style_double_format.cpp</in>
                  <in>quick_start1.cpp</in>
                  <in>quoted_strings.cpp</in>
                  <in>reference.cpp</in>
                  <in>reorder_struct.cpp</in>
                  <in>simple_columns_directive.cpp</in>
                  <in>simple_columns_directive.hpp</in>
                </df>
                <df name="lex">
                  <df name="static_lexer">
                    <in>word_count_generate.cpp</in>
                    <in>word_count_lexer_generate.cpp</in>
                    <in>word_count_lexer_static.cpp</in>
                    <in>word_count_lexer_static.hpp</in>
                    <in>word_count_lexer_tokens.hpp</in>
                    <in>word_count_static.cpp</in>
                    <in>word_count_static.hpp</in>
                    <in>word_count_tokens.hpp</in>
                  </df>
                  <in>custom_token_attribute.cpp</in>
                  <in>example.hpp</in>
                  <in>example1.cpp</in>
                  <in>example2.cpp</in>
                  <in>example3.cpp</in>
                  <in>example4.cpp</in>
                  <in>example5.cpp</in>
                  <in>example6.cpp</in>
                  <in>lexer_debug_support.cpp</in>
                  <in>print_number_tokenids.cpp</in>
                  <in>print_numbers.cpp</in>
                  <in>reference.cpp</in>
                  <in>strip_comments.cpp</in>
                  <in>strip_comments_lexer.cpp</in>
                  <in>word_count.cpp</in>
                  <in>word_count_functor.cpp</in>
                  <in>word_count_functor_flex.cpp</in>
                  <in>word_count_lexer.cpp</in>
                </df>
                <df name="qi">
                  <df name="compiler_tutorial">
                    <df name="calc7">
                      <in>annotation.hpp</in>
                      <in>ast.hpp</in>
                      <in>compiler.cpp</in>
                      <in>compiler.hpp</in>
                      <in>error_handler.hpp</in>
                      <in>expression.cpp</in>
                      <in>expression.hpp</in>
                      <in>expression_def.hpp</in>
                      <in>main.cpp</in>
                      <in>statement.cpp</in>
                      <in>statement.hpp</in>
                      <in>statement_def.hpp</in>
                      <in>vm.cpp</in>
                      <in>vm.hpp</in>
                    </df>
                    <df name="calc8">
                      <in>annotation.hpp</in>
                      <in>ast.hpp</in>
                      <in>compiler.cpp</in>
                      <in>compiler.hpp</in>
                      <in>error_handler.hpp</in>
                      <in>expression.cpp</in>
                      <in>expression.hpp</in>
                      <in>expression_def.hpp</in>
                      <in>main.cpp</in>
                      <in>statement.cpp</in>
                      <in>statement.hpp</in>
                      <in>statement_def.hpp</in>
                      <in>vm.cpp</in>
                      <in>vm.hpp</in>
                    </df>
                    <df name="conjure1">
                      <in>annotation.hpp</in>
                      <in>ast.hpp</in>
                      <in>compiler.cpp</in>
                      <in>compiler.hpp</in>
                      <in>error_handler.hpp</in>
                      <in>expression.cpp</in>
                      <in>expression.hpp</in>
                      <in>expression_def.hpp</in>
                      <in>function.cpp</in>
                      <in>function.hpp</in>
                      <in>function_def.hpp</in>
                      <in>main.cpp</in>
                      <in>skipper.hpp</in>
                      <in>statement.cpp</in>
                      <in>statement.hpp</in>
                      <in>statement_def.hpp</in>
                      <in>vm.cpp</in>
                      <in>vm.hpp</in>
                    </df>
                    <df name="conjure2">
                      <in>annotation.hpp</in>
                      <in>ast.hpp</in>
                      <in>compiler.cpp</in>
                      <in>compiler.hpp</in>
                      <in>config.hpp</in>
                      <in>conjure_static_lexer.hpp</in>
                      <in>conjure_static_lexer_generate.cpp</in>
                      <in>conjure_static_switch_lexer.hpp</in>
                      <in>error_handler.hpp</in>
                      <in>expression.cpp</in>
                      <in>expression.hpp</in>
                      <in>expression_def.hpp</in>
                      <in>function.cpp</in>
                      <in>function.hpp</in>
                      <in>function_def.hpp</in>
                      <in>ids.hpp</in>
                      <in>lexer.cpp</in>
                      <in>lexer.hpp</in>
                      <in>lexer_def.hpp</in>
                      <in>main.cpp</in>
                      <in>statement.cpp</in>
                      <in>statement.hpp</in>
                      <in>statement_def.hpp</in>
                      <in>vm.cpp</in>
                      <in>vm.hpp</in>
                    </df>
                    <df name="conjure3">
                      <in>annotation.hpp</in>
                      <in>ast.hpp</in>
                      <in>compiler.cpp</in>
                      <in>compiler.hpp</in>
                      <in>config.hpp</in>
                      <in>conjure_static_lexer.hpp</in>
                      <in>conjure_static_lexer_generate.cpp</in>
                      <in>conjure_static_switch_lexer.hpp</in>
                      <in>error_handler.hpp</in>
                      <in>expression.cpp</in>
                      <in>expression.hpp</in>
                      <in>expression_def.hpp</in>
                      <in>function.cpp</in>
                      <in>function.hpp</in>
                      <in>function_def.hpp</in>
                      <in>ids.hpp</in>
                      <in>lexer.cpp</in>
                      <in>lexer.hpp</in>
                      <in>lexer_def.hpp</in>
                      <in>main.cpp</in>
                      <in>statement.cpp</in>
                      <in>statement.hpp</in>
                      <in>statement_def.hpp</in>
                      <in>vm.cpp</in>
                      <in>vm.hpp</in>
                    </df>
                    <df name="conjure_samples">
                    </df>
                    <df name="mini_c">
                      <in>annotation.hpp</in>
                      <in>ast.hpp</in>
                      <in>compiler.cpp</in>
                      <in>compiler.hpp</in>
                      <in>error_handler.hpp</in>
                      <in>expression.cpp</in>
                      <in>expression.hpp</in>
                      <in>expression_def.hpp</in>
                      <in>function.cpp</in>
                      <in>function.hpp</in>
                      <in>function_def.hpp</in>
                      <in>main.cpp</in>
                      <in>skipper.hpp</in>
                      <in>statement.cpp</in>
                      <in>statement.hpp</in>
                      <in>statement_def.hpp</in>
                      <in>vm.cpp</in>
                      <in>vm.hpp</in>
                    </df>
                    <df name="mini_c_samples">
                    </df>
                    <in>calc1.cpp</in>
                    <in>calc2.cpp</in>
                    <in>calc3.cpp</in>
                    <in>calc4.cpp</in>
                    <in>calc5.cpp</in>
                    <in>calc6.cpp</in>
                  </df>
                  <df name="mini_xml_samples">
                  </df>
                  <in>actions.cpp</in>
                  <in>adapt_template_struct.cpp</in>
                  <in>boost_array.cpp</in>
                  <in>calc_utree.cpp</in>
                  <in>calc_utree_ast.cpp</in>
                  <in>calc_utree_naive.cpp</in>
                  <in>complex_number.cpp</in>
                  <in>custom_string.cpp</in>
                  <in>display_attribute_type.cpp</in>
                  <in>display_attribute_type.hpp</in>
                  <in>employee.cpp</in>
                  <in>german_floating_point.cpp</in>
                  <in>iter_pos.hpp</in>
                  <in>iter_pos_parser.cpp</in>
                  <in>key_value_sequence.cpp</in>
                  <in>key_value_sequence_empty_value.cpp</in>
                  <in>key_value_sequence_ordered.cpp</in>
                  <in>mini_xml1.cpp</in>
                  <in>mini_xml2.cpp</in>
                  <in>mini_xml3.cpp</in>
                  <in>nabialek.cpp</in>
                  <in>num_list1.cpp</in>
                  <in>num_list2.cpp</in>
                  <in>num_list3.cpp</in>
                  <in>num_list4.cpp</in>
                  <in>parse_date.cpp</in>
                  <in>porting_guide_classic.cpp</in>
                  <in>porting_guide_qi.cpp</in>
                  <in>reference.cpp</in>
                  <in>reorder_struct.cpp</in>
                  <in>roman.cpp</in>
                  <in>sum.cpp</in>
                  <in>typeof.cpp</in>
                  <in>unescaped_string.cpp</in>
                </df>
                <df name="support">
                  <df name="utree">
                    <in>error_handler.hpp</in>
                    <in>parse_sexpr.cpp</in>
                    <in>sexpr_generator.hpp</in>
                    <in>sexpr_parser.hpp</in>
                    <in>utf8_parser.hpp</in>
                  </df>
                  <in>multi_pass.cpp</in>
                </df>
                <df name="x3">
                  <df name="calc">
                    <df name="calc4c">
                      <in>calc4c.cpp</in>
                      <in>grammar.cpp</in>
                      <in>grammar.hpp</in>
                    </df>
                    <df name="calc7">
                      <in>ast.hpp</in>
                      <in>ast_adapted.hpp</in>
                      <in>compiler.cpp</in>
                      <in>compiler.hpp</in>
                      <in>error_handler.hpp</in>
                      <in>expression.cpp</in>
                      <in>expression.hpp</in>
                      <in>expression_def.hpp</in>
                      <in>main.cpp</in>
                      <in>vm.cpp</in>
                      <in>vm.hpp</in>
                    </df>
                    <df name="calc8">
                      <in>ast.hpp</in>
                      <in>ast_adapted.hpp</in>
                      <in>common.hpp</in>
                      <in>compiler.cpp</in>
                      <in>compiler.hpp</in>
                      <in>config.hpp</in>
                      <in>error_handler.hpp</in>
                      <in>expression.cpp</in>
                      <in>expression.hpp</in>
                      <in>expression_def.hpp</in>
                      <in>main.cpp</in>
                      <in>statement.cpp</in>
                      <in>statement.hpp</in>
                      <in>statement_def.hpp</in>
                      <in>vm.cpp</in>
                      <in>vm.hpp</in>
                    </df>
                    <df name="calc9">
                      <in>ast.hpp</in>
                      <in>ast_adapted.hpp</in>
                      <in>common.hpp</in>
                      <in>compiler.cpp</in>
                      <in>compiler.hpp</in>
                      <in>config.hpp</in>
                      <in>error_handler.hpp</in>
                      <in>expression.cpp</in>
                      <in>expression.hpp</in>
                      <in>expression_def.hpp</in>
                      <in>main.cpp</in>
                      <in>statement.cpp</in>
                      <in>statement.hpp</in>
                      <in>statement_def.hpp</in>
                      <in>vm.cpp</in>
                      <in>vm.hpp</in>
                    </df>
                    <in>calc1.cpp</in>
                    <in>calc2.cpp</in>
                    <in>calc4.cpp</in>
                    <in>calc4b.cpp</in>
                    <in>calc5.cpp</in>
                    <in>calc6.cpp</in>
                  </df>
                  <df name="num_list">
                    <in>num_list1.cpp</in>
                    <in>num_list2.cpp</in>
                    <in>num_list3.cpp</in>
                    <in>num_list4.cpp</in>
                  </df>
                  <df name="rexpr">
                    <df name="rexpr_examples">
                    </df>
                    <df name="rexpr_full">
                      <df name="rexpr">
                        <in>ast.hpp</in>
                        <in>ast_adapted.hpp</in>
                        <in>config.hpp</in>
                        <in>error_handler.hpp</in>
                        <in>printer.hpp</in>
                        <in>rexpr.hpp</in>
                        <in>rexpr_def.hpp</in>
                      </df>
                      <df name="src">
                        <in>rexpr.cpp</in>
                      </df>
                      <df name="test">
                        <df name="test_files">
                        </df>
                        <in>parse_rexpr_test.cpp</in>
                      </df>
                    </df>
                    <df name="rexpr_min">
                      <in>rexpr.cpp</in>
                    </df>
                  </df>
                  <in>actions.cpp</in>
                  <in>complex_number.cpp</in>
                  <in>employee.cpp</in>
                  <in>roman.cpp</in>
                  <in>sum.cpp</in>
                </df>
              </df>
              <df name="repository">
                <df name="doc">
                  <df name="html">
                    <df name="images">
                      <df name="callouts">
                      </df>
                    </df>
                    <df name="spirit_repository">
                      <df name="karma_components">
                        <df name="directives">
                        </df>
                        <df name="nonterminal">
                        </df>
                      </df>
                      <df name="qi_components">
                        <df name="directives">
                        </df>
                        <df name="nonterminal">
                        </df>
                        <df name="operators">
                        </df>
                        <df name="primitive">
                        </df>
                      </df>
                      <df name="what_s_new">
                      </df>
                    </df>
                  </df>
                </df>
                <df name="example">
                  <df name="karma">
                    <in>calc2_ast.hpp</in>
                    <in>calc2_ast_dump_sr.cpp</in>
                    <in>confix.cpp</in>
                    <in>mini_xml_karma_sr.cpp</in>
                  </df>
                  <df name="qi">
                    <in>advance.cpp</in>
                    <in>calc1_sr.cpp</in>
                    <in>confix.cpp</in>
                    <in>derived.cpp</in>
                    <in>distinct.cpp</in>
                    <in>flush_multi_pass.cpp</in>
                    <in>iter_pos_parser.cpp</in>
                    <in>keywords.cpp</in>
                    <in>mini_xml2_sr.cpp</in>
                    <in>options.cpp</in>
                    <in>seek.cpp</in>
                  </df>
                </df>
              </df>
            </df>
            <df name="statechart">
              <df name="doc">
              </df>
              <df name="example">
                <df name="BitMachine">
                  <in>BitMachine.cpp</in>
                  <in>UniqueObject.hpp</in>
                  <in>UniqueObjectAllocator.hpp</in>
                </df>
                <df name="Camera">
                  <in>Camera.cpp</in>
                  <in>Camera.hpp</in>
                  <in>Configuring.cpp</in>
                  <in>Configuring.hpp</in>
                  <in>Main.cpp</in>
                  <in>Precompiled.cpp</in>
                  <in>Precompiled.hpp</in>
                  <in>Shooting.cpp</in>
                  <in>Shooting.hpp</in>
                </df>
                <df name="Handcrafted">
                  <in>Handcrafted.cpp</in>
                </df>
                <df name="Keyboard">
                  <in>Keyboard.cpp</in>
                </df>
                <df name="Performance">
                  <in>Performance.cpp</in>
                </df>
                <df name="PingPong">
                  <in>PingPong.cpp</in>
                  <in>Player.cpp</in>
                  <in>Player.hpp</in>
                  <in>Waiting.hpp</in>
                </df>
                <df name="StopWatch">
                  <in>StopWatch.cpp</in>
                  <in>StopWatch2.cpp</in>
                </df>
              </df>
            </df>
            <df name="static_assert">
            </df>
            <df name="system">
              <df name="doc">
              </df>
            </df>
            <df name="test">
              <df name="doc">
                <df name="html">
                  <df name="boost">
                    <df name="debug">
                    </df>
                    <df name="execution_exception">
                    </df>
                    <df name="math">
                      <df name="fpc">
                      </df>
                    </df>
                    <df name="nfp">
                    </df>
                    <df name="test_tools">
                      <df name="assertion_result">
                      </df>
                    </df>
                    <df name="unit_test">
                      <df name="data">
                        <df name="monomorphic">
                          <df name="array">
                          </df>
                          <df name="collection">
                          </df>
                          <df name="dataset">
                          </df>
                          <df name="generated_by">
                          </df>
                          <df name="grid">
                          </df>
                          <df name="join">
                          </df>
                          <df name="result_of">
                          </df>
                          <df name="singleton">
                          </df>
                          <df name="zip">
                          </df>
                        </df>
                        <df name="result_of">
                        </df>
                        <df name="size_t">
                        </df>
                      </df>
                      <df name="framework">
                      </df>
                      <df name="output">
                      </df>
                      <df name="results_reporter">
                      </df>
                    </df>
                  </df>
                  <df name="boost_test">
                    <df name="adv_scenarios">
                      <df name="shared_lib_customizations">
                      </df>
                      <df name="single_header_customizations">
                      </df>
                      <df name="static_lib_customizations">
                      </df>
                    </df>
                    <df name="intro">
                    </df>
                    <df name="practical_usage_recommendations">
                      <df name="tutorials">
                      </df>
                    </df>
                    <df name="runtime_config">
                    </df>
                    <df name="test_output">
                      <df name="log_compil_time_configuration">
                      </df>
                    </df>
                    <df name="testing_tools">
                      <df name="extended_comparison">
                        <df name="floating_point">
                        </df>
                      </df>
                    </df>
                    <df name="tests_organization">
                      <df name="decorators">
                      </df>
                      <df name="fixtures">
                      </df>
                      <df name="test_cases">
                        <df name="test_case_generation">
                        </df>
                      </df>
                      <df name="test_suite">
                      </df>
                    </df>
                    <df name="utf_reference">
                      <df name="link_references">
                      </df>
                      <df name="rt_param_reference">
                      </df>
                      <df name="test_org_reference">
                      </df>
                      <df name="testing_tool_ref">
                      </df>
                      <df name="testout_reference">
                      </df>
                    </df>
                  </df>
                  <df name="header">
                    <df name="boost">
                      <df name="test">
                        <df name="data">
                          <df name="monomorphic">
                            <df name="generators">
                            </df>
                          </df>
                        </df>
                        <df name="output">
                        </df>
                        <df name="tools">
                          <df name="detail">
                          </df>
                        </df>
                        <df name="tree">
                        </df>
                        <df name="utils">
                        </df>
                      </df>
                    </df>
                  </df>
                  <df name="images">
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="cla">
                  <df name="validation">
                    <in>access_unknown.cpp</in>
                    <in>ambiguous_access.cpp</in>
                    <in>ambiguous_input.cpp</in>
                    <in>definition_conflict.cpp</in>
                    <in>invalid_short_name.cpp</in>
                    <in>multiple_generators.cpp</in>
                    <in>multiple_value_handlers.cpp</in>
                    <in>opt_with_default_value.cpp</in>
                    <in>optional_plus_multiplicable.cpp</in>
                    <in>required_missing.cpp</in>
                    <in>unexpected_input.cpp</in>
                    <in>unexpected_repetition.cpp</in>
                  </df>
                  <in>assign_to.cpp</in>
                  <in>basic_float.cpp</in>
                  <in>basic_int.cpp</in>
                  <in>basic_list.cpp</in>
                  <in>basic_string.cpp</in>
                  <in>basic_udt.cpp</in>
                  <in>char_parameter.cpp</in>
                  <in>custom_handler.cpp</in>
                  <in>custom_interpreter.cpp</in>
                  <in>custom_parameter.cpp</in>
                  <in>default_value.cpp</in>
                  <in>dual_name.cpp</in>
                  <in>global.cpp</in>
                  <in>guess_name.cpp</in>
                  <in>help.cpp</in>
                  <in>ignore_mismatch.cpp</in>
                  <in>input_separator.cpp</in>
                  <in>multiplicable.cpp</in>
                  <in>name.cpp</in>
                  <in>optional.cpp</in>
                  <in>optional_value.cpp</in>
                  <in>positional.cpp</in>
                  <in>prefix.cpp</in>
                  <in>reference.cpp</in>
                  <in>remainder.cpp</in>
                  <in>separator.cpp</in>
                  <in>usage.cpp</in>
                  <in>wide_string.cpp</in>
                </df>
                <df name="env">
                  <df name="validation">
                    <in>need_typed_access.cpp</in>
                  </df>
                  <in>custom_interpreter_env.cpp</in>
                  <in>env_var_default_value.cpp</in>
                  <in>environment_ex.cpp</in>
                  <in>global_id.cpp</in>
                  <in>modifier_combination.cpp</in>
                  <in>variable_ex.cpp</in>
                </df>
                <in>const_string.hpp</in>
                <in>const_string_test.cpp</in>
                <in>exec_mon_example.cpp</in>
                <in>external_main_example_1.cpp</in>
                <in>external_main_example_2.cpp</in>
                <in>external_main_example_3.cpp</in>
                <in>filtering_example.cpp</in>
                <in>named_param_example.cpp</in>
                <in>prg_exec_example.cpp</in>
                <in>test_case_template_example.cpp</in>
                <in>unit_test_example_01.cpp</in>
                <in>unit_test_example_02.cpp</in>
                <in>unit_test_example_03.cpp</in>
                <in>unit_test_example_04.cpp</in>
                <in>unit_test_example_05.cpp</in>
                <in>unit_test_example_06.cpp</in>
                <in>unit_test_example_07.cpp</in>
                <in>unit_test_example_08.cpp</in>
                <in>unit_test_example_09_1.cpp</in>
                <in>unit_test_example_09_2.cpp</in>
                <in>unit_test_example_10.cpp</in>
                <in>unit_test_example_11.cpp</in>
                <in>unit_test_example_12.cpp</in>
                <in>unit_test_example_13.cpp</in>
                <in>unit_test_example_15.cpp</in>
              </df>
            </df>
            <df name="thread">
              <df name="doc">
              </df>
              <df name="example">
                <in>ba_externallly_locked.cpp</in>
                <in>condition.cpp</in>
                <in>default_executor.cpp</in>
                <in>executor.cpp</in>
                <in>fib_task_region.cpp</in>
                <in>future_fallback_to.cpp</in>
                <in>future_then.cpp</in>
                <in>future_unwrap.cpp</in>
                <in>future_when_all.cpp</in>
                <in>generic_executor_ref.cpp</in>
                <in>lambda_future.cpp</in>
                <in>make_future.cpp</in>
                <in>monitor.cpp</in>
                <in>mutex.cpp</in>
                <in>not_interleaved.cpp</in>
                <in>not_interleaved2.cpp</in>
                <in>once.cpp</in>
                <in>parallel_accumulate.cpp</in>
                <in>parallel_quick_sort.cpp</in>
                <in>perf_condition_variable.cpp</in>
                <in>perf_shared_mutex.cpp</in>
                <in>producer_consumer.cpp</in>
                <in>producer_consumer2.cpp</in>
                <in>producer_consumer_bounded.cpp</in>
                <in>recursive_mutex.cpp</in>
                <in>scoped_thread.cpp</in>
                <in>serial_executor.cpp</in>
                <in>serial_executor_cont.cpp</in>
                <in>shared_monitor.cpp</in>
                <in>shared_mutex.cpp</in>
                <in>starvephil.cpp</in>
                <in>strict_lock.cpp</in>
                <in>synchronized_person.cpp</in>
                <in>synchronized_value.cpp</in>
                <in>tennis.cpp</in>
                <in>this_executor.cpp</in>
                <in>thread.cpp</in>
                <in>thread_group.cpp</in>
                <in>thread_guard.cpp</in>
                <in>thread_pool.cpp</in>
                <in>tss.cpp</in>
                <in>user_scheduler.cpp</in>
                <in>with_lock_guard.cpp</in>
                <in>xtime.cpp</in>
              </df>
            </df>
            <df name="throw_exception">
              <df name="doc">
              </df>
            </df>
            <df name="timer">
              <df name="doc">
              </df>
              <df name="example">
                <in>auto_cpu_timer_example.cpp</in>
                <in>timex.cpp</in>
              </df>
            </df>
            <df name="tokenizer">
            </df>
            <df name="tr1">
            </df>
            <df name="tti">
              <df name="doc">
                <df name="html">
                  <df name="boost">
                    <df name="tti">
                    </df>
                  </df>
                  <df name="header">
                    <df name="boost">
                      <df name="tti">
                        <df name="gen">
                        </df>
                      </df>
                    </df>
                  </df>
                  <df name="index">
                  </df>
                  <df name="the_type_traits_introspection_library">
                    <df name="tti_detail_has_template">
                    </df>
                  </df>
                </df>
              </df>
            </df>
            <df name="tuple">
              <df name="doc">
              </df>
            </df>
            <df name="type_erasure">
              <df name="example">
                <in>associated.cpp</in>
                <in>basic.cpp</in>
                <in>compose.cpp</in>
                <in>concept_map.cpp</in>
                <in>construction.cpp</in>
                <in>convert.cpp</in>
                <in>custom.cpp</in>
                <in>multi.cpp</in>
                <in>multifunction.cpp</in>
                <in>overload.cpp</in>
                <in>print_sequence.cpp</in>
                <in>printf.cpp</in>
                <in>references.cpp</in>
              </df>
            </df>
            <df name="type_index">
            </df>
            <df name="type_traits">
              <df name="doc">
                <df name="html">
                  <df name="boost_typetraits">
                    <df name="category">
                      <df name="value_traits">
                      </df>
                    </df>
                    <df name="examples">
                    </df>
                    <df name="reference">
                    </df>
                  </df>
                  <df name="index">
                  </df>
                </df>
              </df>
            </df>
            <df name="typeof">
            </df>
            <df name="units">
              <df name="example">
                <in>autoprefixes.cpp</in>
                <in>complex.cpp</in>
                <in>composite_output.cpp</in>
                <in>conversion.cpp</in>
                <in>conversion_factor.cpp</in>
                <in>dimension.cpp</in>
                <in>heterogeneous_unit.cpp</in>
                <in>information.cpp</in>
                <in>kitchen_sink.cpp</in>
                <in>lambda.cpp</in>
                <in>measurement.hpp</in>
                <in>non_base_dimension.cpp</in>
                <in>performance.cpp</in>
                <in>quantity.cpp</in>
                <in>quaternion.cpp</in>
                <in>radar_beam_height.cpp</in>
                <in>runtime_conversion_factor.cpp</in>
                <in>runtime_unit.cpp</in>
                <in>systems.cpp</in>
                <in>temperature.cpp</in>
                <in>test_system.hpp</in>
                <in>tutorial.cpp</in>
                <in>unit.cpp</in>
              </df>
              <df name="images">
              </df>
            </df>
            <df name="unordered">
              <df name="doc">
                <df name="diagrams">
                </df>
              </df>
            </df>
            <df name="utility">
              <df name="doc">
                <df name="html">
                </df>
              </df>
              <df name="identity_type">
                <df name="doc">
                  <df name="html">
                  </df>
                </df>
              </df>
            </df>
            <df name="uuid">
            </df>
            <df name="variant">
            </df>
            <df name="wave">
              <df name="doc">
                <df name="theme">
                </df>
              </df>
            </df>
            <df name="xpressive">
              <df name="example">
                <in>main.cpp</in>
                <in>numbers.cpp</in>
              </df>
            </df>
          </df>
          <df name="more">
            <df name="getting_started">
            </df>
            <df name="writingdoc">
              <df name="template">
              </df>
            </df>
          </df>
          <df name="tools">
            <df name="auto_index">
              <df name="doc">
                <df name="html">
                  <df name="boost_autoindex">
                    <df name="tut">
                      <df name="configure">
                      </df>
                    </df>
                  </df>
                  <df name="images">
                  </df>
                  <df name="index">
                  </df>
                </df>
              </df>
            </df>
            <df name="bcp">
              <df name="doc">
                <df name="html">
                </df>
              </df>
            </df>
            <df name="boostbook">
            </df>
            <df name="boostdep">
              <df name="doc">
                <df name="html">
                </df>
              </df>
            </df>
            <df name="build">
              <df name="doc">
                <df name="images">
                  <df name="callouts">
                  </df>
                </df>
              </df>
              <df name="example">
                <df name="built_tool">
                  <df name="core">
                    <in>core.cpp</in>
                  </df>
                  <df name="tblgen">
                    <in>tblgen.cpp</in>
                  </df>
                </df>
                <df name="customization">
                  <in>codegen.cpp</in>
                </df>
                <df name="generate">
                  <in>a.cpp</in>
                </df>
                <df name="generator">
                </df>
                <df name="gettext">
                  <in>main.cpp</in>
                </df>
                <df name="hello">
                  <in>hello.cpp</in>
                </df>
                <df name="libraries">
                  <df name="app">
                    <in>app.cpp</in>
                  </df>
                  <df name="util">
                    <df name="foo">
                      <df name="include">
                        <in>lib1.h</in>
                      </df>
                      <in>bar.cpp</in>
                    </df>
                  </df>
                </df>
                <df name="make">
                </df>
                <df name="pch">
                  <df name="include">
                    <in>pch.hpp</in>
                  </df>
                  <df name="source">
                    <in>hello_world.cpp</in>
                  </df>
                </df>
                <df name="python_modules">
                </df>
                <df name="qt">
                  <df name="qt3">
                    <df name="hello">
                      <in>canvas.cpp</in>
                      <in>canvas.h</in>
                      <in>main.cpp</in>
                    </df>
                    <df name="moccable-cpp">
                      <in>main.cpp</in>
                    </df>
                    <df name="uic">
                      <in>main.cpp</in>
                    </df>
                  </df>
                  <df name="qt4">
                    <df name="hello">
                      <in>arrow.cpp</in>
                      <in>arrow.h</in>
                      <in>main.cpp</in>
                    </df>
                    <df name="moccable-cpp">
                      <in>main.cpp</in>
                    </df>
                    <df name="uic">
                      <in>main.cpp</in>
                    </df>
                  </df>
                </df>
                <df name="testing">
                  <in>compile-fail.cpp</in>
                  <in>fail.cpp</in>
                  <in>success.cpp</in>
                </df>
                <df name="variant">
                  <df name="libs">
                    <in>l.cpp</in>
                  </df>
                  <in>a.cpp</in>
                </df>
              </df>
              <df name="src">
                <df name="engine">
                  <df name="boehm_gc">
                    <df name="doc">
                    </df>
                  </df>
                </df>
              </df>
              <df name="test">
              </df>
              <df name="website">
                <df name="bootstrap">
                  <df name="css">
                  </df>
                  <df name="fonts">
                  </df>
                </df>
              </df>
            </df>
            <df name="inspect">
            </df>
            <df name="quickbook">
              <df name="doc">
                <df name="html">
                  <df name="images">
                    <df name="callouts">
                    </df>
                    <df name="extra">
                      <df name="katepart">
                      </df>
                    </df>
                  </df>
                </df>
              </df>
              <df name="test">
                <df name="html">
                  <df name="images">
                  </df>
                </df>
              </df>
            </df>
          </df>
        </df>
        <df name="json">
          <in>json_spirit.h</in>
          <in>json_spirit_error_position.h</in>
          <in>json_spirit_reader.cpp</in>
          <in>json_spirit_reader.h</in>
          <in>json_spirit_reader_template.h</in>
          <in>json_spirit_stream_reader.h</in>
          <in>json_spirit_utils.h</in>
          <in>json_spirit_value.cpp</in>
          <in>json_spirit_value.h</in>
          <in>json_spirit_writer.cpp</in>
          <in>json_spirit_writer.h</in>
          <in>json_spirit_writer_template.h</in>
        </df>
        <df name="leveldb">
          <df name="db">
            <in>autocompact_test.cc</in>
            <in>builder.cc</in>
            <in>builder.h</in>
            <in>c.cc</in>
            <in>c_test.c</in>
            <in>corruption_test.cc</in>
            <in>db_bench.cc</in>
            <in>db_impl.cc</in>
            <in>db_impl.h</in>
            <in>db_iter.cc</in>
            <in>db_iter.h</in>
            <in>db_test.cc</in>
            <in>dbformat.cc</in>
            <in>dbformat.h</in>
            <in>dbformat_test.cc</in>
            <in>filename.cc</in>
            <in>filename.h</in>
            <in>filename_test.cc</in>
            <in>leveldb_main.cc</in>
            <in>log_format.h</in>
            <in>log_reader.cc</in>
            <in>log_reader.h</in>
            <in>log_test.cc</in>
            <in>log_writer.cc</in>
            <in>log_writer.h</in>
            <in>memtable.cc</in>
            <in>memtable.h</in>
            <in>repair.cc</in>
            <in>skiplist.h</in>
            <in>skiplist_test.cc</in>
            <in>snapshot.h</in>
            <in>table_cache.cc</in>
            <in>table_cache.h</in>
            <in>version_edit.cc</in>
            <in>version_edit.h</in>
            <in>version_edit_test.cc</in>
            <in>version_set.cc</in>
            <in>version_set.h</in>
            <in>version_set_test.cc</in>
            <in>write_batch.cc</in>
            <in>write_batch_internal.h</in>
            <in>write_batch_test.cc</in>
          </df>
          <df name="doc">
            <df name="bench">
              <in>db_bench_sqlite3.cc</in>
              <in>db_bench_tree_db.cc</in>
            </df>
          </df>
          <df name="helpers">
            <df name="memenv">
              <in>memenv.cc</in>
              <in>memenv.h</in>
              <in>memenv_test.cc</in>
            </df>
          </df>
          <df name="include">
            <df name="leveldb">
              <in>c.h</in>
              <in>cache.h</in>
              <in>comparator.h</in>
              <in>db.h</in>
              <in>env.h</in>
              <in>filter_policy.h</in>
              <in>iterator.h</in>
              <in>options.h</in>
              <in>slice.h</in>
              <in>status.h</in>
              <in>table.h</in>
              <in>table_builder.h</in>
              <in>write_batch.h</in>
            </df>
          </df>
          <df name="issues">
            <in>issue178_test.cc</in>
            <in>issue200_test.cc</in>
          </df>
          <df name="port">
            <df name="win">
              <in>stdint.h</in>
            </df>
            <in>atomic_pointer.h</in>
            <in>port.h</in>
            <in>port_example.h</in>
            <in>port_posix.cc</in>
            <in>port_posix.h</in>
            <in>port_win.cc</in>
            <in>port_win.h</in>
            <in>thread_annotations.h</in>
          </df>
          <df name="table">
            <in>block.cc</in>
            <in>block.h</in>
            <in>block_builder.cc</in>
            <in>block_builder.h</in>
            <in>filter_block.cc</in>
            <in>filter_block.h</in>
            <in>filter_block_test.cc</in>
            <in>format.cc</in>
            <in>format.h</in>
            <in>iterator.cc</in>
            <in>iterator_wrapper.h</in>
            <in>merger.cc</in>
            <in>merger.h</in>
            <in>table.cc</in>
            <in>table_builder.cc</in>
            <in>table_test.cc</in>
            <in>two_level_iterator.cc</in>
            <in>two_level_iterator.h</in>
          </df>
          <df name="util">
            <in>arena.cc</in>
            <in>arena.h</in>
            <in>arena_test.cc</in>
            <in>bloom.cc</in>
            <in>bloom_test.cc</in>
            <in>cache.cc</in>
            <in>cache_test.cc</in>
            <in>coding.cc</in>
            <in>coding.h</in>
            <in>coding_test.cc</in>
            <in>comparator.cc</in>
            <in>crc32c.cc</in>
            <in>crc32c.h</in>
            <in>crc32c_test.cc</in>
            <in>env.cc</in>
            <in>env_posix.cc</in>
            <in>env_test.cc</in>
            <in>env_win.cc</in>
            <in>filter_policy.cc</in>
            <in>hash.cc</in>
            <in>hash.h</in>
            <in>histogram.cc</in>
            <in>histogram.h</in>
            <in>logging.cc</in>
            <in>logging.h</in>
            <in>mutexlock.h</in>
            <in>options.cc</in>
            <in>posix_logger.h</in>
            <in>random.h</in>
            <in>status.cc</in>
            <in>testharness.cc</in>
            <in>testharness.h</in>
            <in>testutil.cc</in>
            <in>testutil.h</in>
          </df>
        </df>
        <df name="obj">
          <df name="zerocoin">
          </df>
          <in>build.h</in>
        </df>
        <df name="obj-test">
        </df>
        <df name="qt">
          <df name="forms">
          </df>
          <df name="locale">
          </df>
          <df name="res">
            <df name="icons">
            </df>
            <df name="images">
            </df>
            <df name="movies">
            </df>
            <df name="src">
            </df>
          </df>
          <df name="test">
            <in>test_main.cpp</in>
            <in>uritests.cpp</in>
            <in>uritests.h</in>
          </df>
          <in>aboutdialog.cpp</in>
          <in>aboutdialog.h</in>
          <in>addressbookpage.cpp</in>
          <in>addressbookpage.h</in>
          <in>addresstablemodel.cpp</in>
          <in>addresstablemodel.h</in>
          <in>askpassphrasedialog.cpp</in>
          <in>askpassphrasedialog.h</in>
          <in>bitcoin.cpp</in>
          <in>bitcoinaddressvalidator.cpp</in>
          <in>bitcoinaddressvalidator.h</in>
          <in>bitcoinamountfield.cpp</in>
          <in>bitcoinamountfield.h</in>
          <in>bitcoingui.cpp</in>
          <in>bitcoingui.h</in>
          <in>bitcoinstrings.cpp</in>
          <in>bitcoinunits.cpp</in>
          <in>bitcoinunits.h</in>
          <in>clientmodel.cpp</in>
          <in>clientmodel.h</in>
          <in>coincontroldialog.cpp</in>
          <in>coincontroldialog.h</in>
          <in>coincontroltreewidget.cpp</in>
          <in>coincontroltreewidget.h</in>
          <in>csvmodelwriter.cpp</in>
          <in>csvmodelwriter.h</in>
          <in>editaddressdialog.cpp</in>
          <in>editaddressdialog.h</in>
          <in>guiconstants.h</in>
          <in>guiutil.cpp</in>
          <in>guiutil.h</in>
          <in>macdockiconhandler.h</in>
          <in>macdockiconhandler.mm</in>
          <in>monitoreddatamapper.cpp</in>
          <in>monitoreddatamapper.h</in>
          <in>notificator.cpp</in>
          <in>notificator.h</in>
          <in>optionsdialog.cpp</in>
          <in>optionsdialog.h</in>
          <in>optionsmodel.cpp</in>
          <in>optionsmodel.h</in>
          <in>overviewpage.cpp</in>
          <in>overviewpage.h</in>
          <in>qrcodedialog.cpp</in>
          <in>qrcodedialog.h</in>
          <in>qtipcserver.cpp</in>
          <in>qtipcserver.h</in>
          <in>qvalidatedlineedit.cpp</in>
          <in>qvalidatedlineedit.h</in>
          <in>qvaluecombobox.cpp</in>
          <in>qvaluecombobox.h</in>
          <in>rpcconsole.cpp</in>
          <in>rpcconsole.h</in>
          <in>sendcoinsdialog.cpp</in>
          <in>sendcoinsdialog.h</in>
          <in>sendcoinsentry.cpp</in>
          <in>sendcoinsentry.h</in>
          <in>signverifymessagedialog.cpp</in>
          <in>signverifymessagedialog.h</in>
          <in>transactiondesc.cpp</in>
          <in>transactiondesc.h</in>
          <in>transactiondescdialog.cpp</in>
          <in>transactiondescdialog.h</in>
          <in>transactionfilterproxy.cpp</in>
          <in>transactionfilterproxy.h</in>
          <in>transactionrecord.cpp</in>
          <in>transactionrecord.h</in>
          <in>transactiontablemodel.cpp</in>
          <in>transactiontablemodel.h</in>
          <in>transactionview.cpp</in>
          <in>transactionview.h</in>
          <in>walletmodel.cpp</in>
          <in>walletmodel.h</in>
        </df>
        <df name="test">
          <df name="data">
          </df>
          <in>Checkpoints_tests.cpp</in>
          <in>DoS_tests.cpp</in>
          <in>accounting_tests.cpp</in>
          <in>allocator_tests.cpp</in>
          <in>base32_tests.cpp</in>
          <in>base58_tests.cpp</in>
          <in>base64_tests.cpp</in>
          <in>bignum_tests.cpp</in>
          <in>getarg_tests.cpp</in>
          <in>key_tests.cpp</in>
          <in>mruset_tests.cpp</in>
          <in>multisig_tests.cpp</in>
          <in>netbase_tests.cpp</in>
          <in>rpc_tests.cpp</in>
          <in>script_P2SH_tests.cpp</in>
          <in>script_tests.cpp</in>
          <in>sigopcount_tests.cpp</in>
          <in>test_bitcoin.cpp</in>
          <in>transaction_tests.cpp</in>
          <in>uint160_tests.cpp</in>
          <in>uint256_tests.cpp</in>
          <in>util_tests.cpp</in>
          <in>wallet_tests.cpp</in>
        </df>
        <df name="zerocoin">
          <in>Accumulator.cpp</in>
          <in>Accumulator.h</in>
          <in>AccumulatorProofOfKnowledge.cpp</in>
          <in>AccumulatorProofOfKnowledge.h</in>
          <in>Coin.cpp</in>
          <in>Coin.h</in>
          <in>CoinSpend.cpp</in>
          <in>CoinSpend.h</in>
          <in>Commitment.cpp</in>
          <in>Commitment.h</in>
          <in>ParamGeneration.cpp</in>
          <in>ParamGeneration.h</in>
          <in>Params.cpp</in>
          <in>Params.h</in>
          <in>SerialNumberSignatureOfKnowledge.cpp</in>
          <in>SerialNumberSignatureOfKnowledge.h</in>
          <in>SpendMetaData.cpp</in>
          <in>SpendMetaData.h</in>
          <in>ZeroTest.cpp</in>
          <in>ZeroTest.h</in>
          <in>Zerocoin.h</in>
        </df>
        <in>addrman.cpp</in>
        <in>addrman.h</in>
        <in>alert.cpp</in>
        <in>alert.h</in>
        <in>allocators.h</in>
        <in>base58.h</in>
        <in>bignum.h</in>
        <in>bitcoinrpc.cpp</in>
        <in>bitcoinrpc.h</in>
        <in>checkpoints.cpp</in>
        <in>checkpoints.h</in>
        <in>clientversion.h</in>
        <in>coincontrol.h</in>
        <in>compat.h</in>
        <in>crypter.cpp</in>
        <in>crypter.h</in>
        <in>db.cpp</in>
        <in>db.h</in>
        <in>init.cpp</in>
        <in>init.h</in>
        <in>irc.cpp</in>
        <in>irc.h</in>
        <in>kernel.cpp</in>
        <in>kernel.h</in>
        <in>key.cpp</in>
        <in>key.h</in>
        <in>keystore.cpp</in>
        <in>keystore.h</in>
        <in>main.cpp</in>
        <in>main.h</in>
        <in>miner.cpp</in>
        <in>miner.h</in>
        <in>mruset.h</in>
        <in>net.cpp</in>
        <in>net.h</in>
        <in>netbase.cpp</in>
        <in>netbase.h</in>
        <in>noui.cpp</in>
        <in>pbkdf2.cpp</in>
        <in>pbkdf2.h</in>
        <in>protocol.cpp</in>
        <in>protocol.h</in>
        <in>rpcblockchain.cpp</in>
        <in>rpcdump.cpp</in>
        <in>rpcmining.cpp</in>
        <in>rpcnet.cpp</in>
        <in>rpcrawtransaction.cpp</in>
        <in>rpcwallet.cpp</in>
        <in>script.cpp</in>
        <in>script.h</in>
        <in>scrypt-arm.S</in>
        <in>scrypt-x86.S</in>
        <in>scrypt-x86_64.S</in>
        <in>scrypt.cpp</in>
        <in>scrypt.h</in>
        <in>serialize.h</in>
        <in>strlcpy.h</in>
        <in>sync.cpp</in>
        <in>sync.h</in>
        <in>threadsafety.h</in>
        <in>txdb-leveldb.cpp</in>
        <in>txdb-leveldb.h</in>
        <in>txdb.h</in>
        <in>ui_interface.h</in>
        <in>uint256.h</in>
        <in>util.cpp</in>
        <in>util.h</in>
        <in>version.cpp</in>
        <in>version.h</in>
        <in>wallet.cpp</in>
        <in>wallet.h</in>
        <in>walletdb.cpp</in>
        <in>walletdb.h</in>
      </df>
    </df>
  </logicalFolder>
  <projectmakefile></projectmakefile>
  <confs>
    <conf name="Default" type="0">
      <toolsSet>
        <developmentServer>localhost</developmentServer>
        <platform>4</platform>
      </toolsSet>
      <compile>
        <compiledirpicklist>
          <compiledirpicklistitem>.</compiledirpicklistitem>
          <compiledirpicklistitem>${AUTO_FOLDER}</compiledirpicklistitem>
        </compiledirpicklist>
        <compiledir>${AUTO_FOLDER}</compiledir>
        <compilecommandpicklist>
          <compilecommandpicklistitem>${MAKE} ${ITEM_NAME}.o</compilecommandpicklistitem>
          <compilecommandpicklistitem>${AUTO_COMPILE}</compilecommandpicklistitem>
        </compilecommandpicklist>
        <compilecommand>${AUTO_COMPILE}</compilecommand>
      </compile>
      <dbx_gdbdebugger version="1">
        <gdb_pathmaps>
        </gdb_pathmaps>
        <gdb_interceptlist>
          <gdbinterceptoptions gdb_all="false" gdb_unhandled="true" gdb_unexpected="true"/>
        </gdb_interceptlist>
        <gdb_options>
          <DebugOptions>
          </DebugOptions>
        </gdb_options>
        <gdb_buildfirst gdb_buildfirst_overriden="false" gdb_buildfirst_old="false"/>
      </dbx_gdbdebugger>
      <nativedebugger version="1">
        <engine>gdb</engine>
      </nativedebugger>
      <runprofile version="9">
        <runcommandpicklist>
          <runcommandpicklistitem>"${OUTPUT_PATH}"</runcommandpicklistitem>
        </runcommandpicklist>
        <runcommand>"${OUTPUT_PATH}"</runcommand>
        <rundir>.</rundir>
        <buildfirst>false</buildfirst>
        <terminal-type>0</terminal-type>
        <remove-instrumentation>0</remove-instrumentation>
        <environment>
        </environment>
      </runprofile>
    </conf>
  </confs>
</configurationDescriptor>
